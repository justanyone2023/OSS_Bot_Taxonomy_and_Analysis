,title,author,address,booktitle,note,year,volume,number,pages,pages,abstract,ISSN,ISBNs,doi,Funding Information,PDF Link,Author Keywords,IEEE Terms,keywords,series,series,series,note,note,note,note,publisher,ID
0,SAW-BOT: Proposing Fixes for Static Analysis Warnings with GitHub Suggestions,D. Serban; B. Golsteijn; R. Holdorp; A. Serebrenik,"Eindhoven University of Technology, The Netherlands; Philips Research, The Netherlands; Philips Research, The Netherlands; Eindhoven University of Technology, The Netherlands",2021 IEEE/ACM Third International Workshop on Bots in Software Engineering (BotSE),7 Jul 2021,2021,,,26,30,"In this experience report we present SAW-BOT, a bot proposing fixes for static analysis warnings. The bot has been evaluated with five professional software developers by means of a Wizard of Oz experiment, semi-structured interviews and the mTAM questionnaire. We have observed that developers prefer GitHub suggestions to two baseline operation modes. Our study indicates that GitHub suggestions are a viable mechanism for implementing bots proposing fixes for static analysis warnings.",,978-1-6654-4468-2,10.1109/BotSE52550.2021.00013,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9474413,static analysis;bot;GitHub suggestions,Productivity;Bot (Internet);Correlation;Conferences;Static analysis;Software;Interviews,,7.0,,24.0,IEEE,7 Jul 2021,,,IEEE,IEEE Conferences
1,Leveraging Predictions From Multiple Repositories to Improve Bot Detection,N. Chidambaram; A. Decan; M. Golzadeh,"Software Engineering Lab, University of Mons, Mons, Belgium; Software Engineering Lab, University of Mons, Mons, Belgium; Software Engineering Lab, University of Mons, Mons, Belgium",2022 IEEE/ACM 4th International Workshop on Bots in Software Engineering (BotSE),8 Jul 2022,2022,,,6,9,"Contemporary social coding platforms such as GitHub facilitate collaborative distributed software development. Developers engaged in these platforms often use machine accounts (bots) for automating effort-intensive or repetitive activities. Determining whether a contributor corresponds to a bot or a human account is important in socio-technical studies, for example to assess the positive and negative impact of using bots, analyse the evolution of bots and their usage, identify top human contributors, and so on. BoDeGHa is one of the bot detection tools that have been proposed in the literature. It relies on comment activity within a single repository to predict whether an account is driven by a bot or by a human. This paper presents preliminary results on how the effectiveness of BoDeGHa can be improved by combining the predictions obtained from many repositories at once. We found that doing this not only increases the number of cases for which a prediction can be made, but that many diverging predictions can be fixed this way. These promising, albeit preliminary, results suggest that the “wisdom of the crowd” principle can improve the effectiveness of bot detection tools.",,978-1-4503-9333-1,10.1145/3528228.3528403,"Fonds de la Recherche Scientifique – FNRS(grant numbers:O.0157.18F-RG43,T.0017.18); ",https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9814626,GitHub;Bot detection;socio technical analysis;collaborative software development;empirical analysis;software repository mining,Bot (Internet);Conferences;Collaboration;Organizations;Predictive models;Data processing;Software,,3.0,,17.0,,8 Jul 2022,,,IEEE,IEEE Conferences
2,Identifying bot activity in GitHub pull request and issue comments,M. Golzadeh; A. Decan; E. Constantinou; T. Mens,"Software Engineering Lab, University of Mons, Belgium; Software Engineering Lab, University of Mons, Belgium; Eindhoven University of Technology, Netherlands; Software Engineering Lab, University of Mons, Belgium",2021 IEEE/ACM Third International Workshop on Bots in Software Engineering (BotSE),7 Jul 2021,2021,,,21,25,"Development bots are used on Github to automate repetitive activities. Such bots communicate with human actors via issue comments and pull request comments. Identifying such bot comments allows to prevent bias in socio-technical studies related to software development. To automate their identification, we propose a classification model based on natural language processing. Starting from a balanced ground-truth dataset of 19,282 PR and issue comments, we encode the comments as vectors using a combination of the bag of words and TF-IDF techniques. We train a range of binary classifiers to predict the type of comment (human or bot) based on this vector representation. A multinomial Naive Bayes classifier provides the best results. Its performance on a test set containing 50% of the data achieves an average precision, recall, and F1 score of 0.88. Although the model shows a promising result on the pull request and issue comments, further work is required to generalize the model on other types of activities, like commit messages and code reviews.",,978-1-6654-4468-2,10.1109/BotSE52550.2021.00012,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9474384,GitHub;automated comments;distributed software development;classification model;empirical analysis,Training;Bot (Internet);Analytical models;Predictive models;Probabilistic logic;Software;Natural language processing,,15.0,,20.0,IEEE,7 Jul 2021,,,IEEE,IEEE Conferences
3,On the Accuracy of Bot Detection Techniques,M. Golzadeh; A. Decan; N. Chidambaram,"Software Engineering Lab, University of Mons, Mons, Belgium; Software Engineering Lab, University of Mons, Mons, Belgium; Software Engineering Lab, University of Mons, Mons, Belgium",2022 IEEE/ACM 4th International Workshop on Bots in Software Engineering (BotSE),8 Jul 2022,2022,,,1,5,"Development bots are often used to automate a wide variety of repetitive tasks in collaborative software development. Such bots are commonly among the most active project contributors in terms of commit activity. As such, tools that analyse contributor activity (e.g., for recognizing and giving credit to project members for their contributions) need to take into account the bots and exclude their activity. While there are a few techniques to detect bots in software repositories, these techniques are not perfect and may miss some bots or may wrongly identify some human accounts as bots. In this paper, we present an exploratory study on the accuracy of bot detection techniques on a set of 540 accounts from 27 GitHub projects. We show that none of the bot detection techniques are accurate enough to detect bots among the 20 most active contributors of each project. We show that combining these techniques drastically increases the accuracy and recall of bot detection. We also highlight the importance of considering bots when attributing contributions to humans, since bots are prevalent among the top contributors and responsible for large proportions of commits.",,978-1-4503-9333-1,10.1145/3528228.3528406,"Fonds de la Recherche Scientifique - FNRS(grant numbers:O.0157.18F-RG43,T.0017.18); ",https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9814594,social coding platforms;bot detection techniques;contributor attribution;empirical analysis;GitHub;software repository mining,Bot (Internet);Conferences;Collaborative software;Focusing;Software;Encoding;Data mining,,6.0,,13.0,,8 Jul 2022,,,IEEE,IEEE Conferences
4,RABBIT: A tool for identifying bot accounts based on their recent GitHub event history,N. Chidambaram; T. Mens; A. Decan,"Software Engineering Lab University of Mons, Mons, Belgium; Software Engineering Lab University of Mons, Mons, Belgium; F.R.S.-FNRS Research Associate Software Engineering Lab University of Mons, Mons, Belgium",2024 IEEE/ACM 21st International Conference on Mining Software Repositories (MSR),18 Jun 2024,2024,,,687,691,"Collaborative software development through GitHub repositories frequently relies on bot accounts to automate repetitive and error-prone tasks. This highlights the need to have accurate and efficient bot identification tools. Several such tools have been proposed in the past, but they tend to rely on a substantial amount of historical data, or they limit themselves to a reduced subset of activity types, making them difficult to use at large scale. To overcome these limitations, we developed RABBIT, an open source command-line tool that queries the GitHub Events API to retrieve the recent events of a given GitHub account and predicts whether the account is a human or a bot. RABBIT is based on an XGBoost classification model that relies on six features related to account activities and achieves high performance, with an AUC, F1 score, precision and recall of 0.92. Compared to the state-of-the-art in bot identification, RABBIT exhibits a similar performance in terms of precision, recall and F1 score, while being more than an order of magnitude faster and requiring considerably less data. This makes RABBIT usable on a large scale, capable of processing several thousand accounts per hour efficiently.",2574-3864,979-8-4007-0587-8,,Service Public de Wallonie; ,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10555785,GitHub events;classification model;bot identification,Rabbits;Collaborative software;Predictive models;Chatbots;Software;Data models;History,,,,15.0,,18 Jun 2024,,,IEEE,IEEE Conferences
5,On the Adoption of a TODO Bot on GITHuB: A Preliminary Study,H. Mohayeji; F. Ebert; E. Arts; E. Constantinou; A. Serebrenik,"Eindhoven University of Technology, Eindhoven, The Netherlands; Eindhoven University of Technology, Eindhoven, The Netherlands; Eindhoven University of Technology, Eindhoven, The Netherlands; Eindhoven University of Technology, Eindhoven, The Netherlands; Eindhoven University of Technology, Eindhoven, The Netherlands",2022 IEEE/ACM 4th International Workshop on Bots in Software Engineering (BotSE),8 Jul 2022,2022,,,23,27,"Bots support different software maintenance and evolution activities, such as code review or executing tests. Recently, several bots have been proposed to help developers to keep track of postponed activities, expressed by means of TODO comments: e.g., TODO Bot automatically creates a GITHuB issue when a TODO comment is added to a repository, increasing visibility of TODO comments. In this work, we perform a preliminary evaluation of the impact of the TODO Bot on software development practice. We conjecture that the introduction of the TODO Bot would facilitate keeping track of the TODO comments, and hence encourage developers to use more TODO comments in their code changes. To evaluate this conjecture, we analyze all the 2,208 repositories which have at least one GITHuB issue created by the TODO Bot. Firstly, we investigate to what extent the bot is being used and describe the repositories using the bot. We observe that the majority (54%) of the repositories which adopted the TODO Bot are new, i.e., were created within less than one month of first issue created by the bot, and from those, more than 60% have the issue created within three days. We observe a statistically significant increase in the number of the TODO comments after the adoption of the bot, however with a small effect size. Our results suggest that the adoption of the TODO Bot encourages developers to introduce TODO comments rendering the postponed decisions more visible. Nevertheless, it does not speed up the process of addressing TODO comments or corresponding GITHuB issues.",,978-1-4503-9333-1,10.1145/3528228.3528408,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9814459,TODO;bots;technical debt;code comments,Bot (Internet);Software maintenance;Codes;Conferences;Rendering (computer graphics);Complexity theory;Software development management,,3.0,,15.0,,8 Jul 2022,,,IEEE,IEEE Conferences
6,Bot With Interactions: Improving GitHub Pull-Request Feedback Through Two-Way Communication,Z. Hu; E. Gehringer,"Infrastructure & SRE Organization Pinterest, Inc., San Francisco, USA; Department of Computer Science, North Carolina State University, Raleigh, USA",2023 IEEE/ACM 5th International Workshop on Bots in Software Engineering (BotSE),27 Jul 2023,2023,,,28,32,"Projects in our software-engineering course require students to submit GitHub pull requests to an open-source software project containing more than 30,000 lines of source code. Once submitted, code is checked by a static code analyzer, as well as a bot named Danger Bot. The Danger Bot is able to detect more than 40 programmable system-specific guideline violations (which are different from static analysis rules). Although use of the Danger Bot was associated with a decrease of 40% in guideline violations, it also emitted some false positives. Neither staff nor students could change the feedback given by the Danger Bot on pull-request pages, because there was only one-way communication, from bot to humans. In this paper, we discuss how we bypass the limitations of the Danger Bot by introducing the Danger Bot 2.0 (hereinafter, ”the bot”) with two-way communication between humans and the bot. In this way, if students or teaching staff find some false positives produced by the bot, they can tell the bot about this. After teaching staff cancel a particular message as a false positive, the bot will not report that message again until it is re-enabled by the staff. We conducted a pilot study for the bot with two-way communication. Results showed that the bot with two-way communication was associated with a significant 70% decrease of unresolved guideline violations and the elimination of 100% false positives in them. The majority of two-way communications happened between the teaching staff and the bot, especially when teaching staff cancelled all the false positive violations after inspection. There was only one communication between students and the bot.",,979-8-3503-0212-7,10.1109/BotSE59190.2023.00014,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10190319,bot;open-source software;software engineering;open-source curriculum;automated feedback,Codes;Source coding;Education;Static analysis;Inspection;Chatbots;Open source software,,1.0,,21.0,IEEE,27 Jul 2023,,,IEEE,IEEE Conferences
7,Do Bots Modify the Workflow of GitHub Teams?,S. Saadat; N. Colmenares; G. Sukthankar,"Department of Computer Science, University of Central Florida, Orlando, Florida; Department of Computer Science, University of Central Florida, Orlando, Florida; Department of Computer Science, University of Central Florida, Orlando, Florida",2021 IEEE/ACM Third International Workshop on Bots in Software Engineering (BotSE),7 Jul 2021,2021,,,1,5,"The ever-increasing complexity of modern software engineering projects makes the usage of automated assistants imperative. Bots can be used to complete repetitive tasks during development and testing, as well as promoting communication between team members through issue reporting and documentation. Although the ultimate aim of these automated assistants is to speed taskwork completion, their inclusion into GitHub repositories may affect teamwork as well. This paper studies the question of how bots modify the team workflow. We examined the event sequences of repositories with bots and without bots using a contrast motif discovery method to detect subsequences that are more prevalent in one set of event sequences vs. the other. Our study reveals that teams with bots are more likely to intersperse comments throughout their coding activities, while not actually being more prolific commenters.",,978-1-6654-4468-2,10.1109/BotSE52550.2021.00008,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9474411,social coding platforms;sequential pattern mining;bot classification;teamwork,Bot (Internet);Conferences;Documentation;Encoding;Teamwork;Complexity theory;Task analysis,,9.0,,26.0,IEEE,7 Jul 2021,,,IEEE,IEEE Conferences
8,Software Bots in Software Engineering: Benefits and Challenges,M. Wessel; M. A. Gerosa; E. Shihab,"Delft University of Technology, Delft, The Netherlands; Northern Arizona University, Flagstaff, USA; Concordia University, Montreal, Canada",2022 IEEE/ACM 19th International Conference on Mining Software Repositories (MSR),21 Jun 2022,2022,,,724,725,"Software bots are becoming increasingly popular in software engineering (SE). In this tutorial, we define what a bot is and present several examples. We also discuss the many benefits bots provide to the SE community, including helping in development tasks (such as pull request review and integration) and onboarding newcomers to a project. Finally, we discuss the challenges related to interacting with and developing software bots.",2574-3864,978-1-4503-9303-4,10.1145/3524842.3528533,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9796186,Software Bots;GitHub Bots;Chatbots;Human-bot Interaction;Open Source Software;Automation;Collaborative Development,Bot (Internet);Tutorials;Software;Data mining;Task analysis;Software engineering,,,,19.0,CCBY,21 Jun 2022,,,IEEE,IEEE Conferences
9,"Bots Don’t Mind Waiting, Do They? Comparing the Interaction With Automatically and Manually Created Pull Requests",M. Wyrich; R. Ghit; T. Haller; C. Müller,"Institute of Software Engineering, University of Stuttgart, Stuttgart, Germany; Institute of Software Engineering, University of Stuttgart, Stuttgart, Germany; Institute of Software Engineering, University of Stuttgart, Stuttgart, Germany; Institute of Software Engineering, University of Stuttgart, Stuttgart, Germany",2021 IEEE/ACM Third International Workshop on Bots in Software Engineering (BotSE),7 Jul 2021,2021,,,6,10,"As a maintainer of an open source software project, you are usually happy about contributions in the form of pull requests that bring the project a step forward. Past studies have shown that when reviewing a pull request, not only its content is taken into account, but also, for example, the social characteristics of the contributor. Whether a contribution is accepted and how long this takes therefore depends not only on the content of the contribution. What we only have indications for so far, however, is that pull requests from bots may be prioritized lower, even if the bots are explicitly deployed by the development team and are considered useful. One goal of the bot research and development community is to design helpful bots to effectively support software development in a variety of ways. To get closer to this goal, in this GitHub mining study, we examine the measurable differences in how maintainers interact with manually created pull requests from humans compared to those created automatically by bots. About one third of all pull requests on GitHub currently come from bots. While pull requests from humans are accepted and merged in 72.53% of all cases, this applies to only 37.38% of bot pull requests. Furthermore, it takes significantly longer for a bot pull request to be interacted with and for it to be merged, even though they contain fewer changes on average than human pull requests. These results suggest that bots have yet to realize their full potential.",,978-1-6654-4468-2,10.1109/BotSE52550.2021.00009,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9474402,software bot;human-agent interaction;open source;pull request;github mining study,Bot (Internet);Conferences;Data mining;Research and development;Open source software;Software development management;Software engineering,,14.0,,30.0,IEEE,7 Jul 2021,,,IEEE,IEEE Conferences
10,An Exploratory Study of Reactions to Bot Comments on GitHub,J. C. Farah; B. Spaenlehauer; X. Lu; S. Ingram; D. Gillet,"École Polytechnique Fédérale de Lausanne, Switzerland; École Polytechnique Fédérale de Lausanne, Switzerland; Nanyang Technological University, Singapore, Singapore; University of Applied Sciences, Fribourg, Switzerland; École Polytechnique Fédérale de Lausanne, Switzerland",2022 IEEE/ACM 4th International Workshop on Bots in Software Engineering (BotSE),8 Jul 2022,2022,,,18,22,"The widespread use of bots to support software development makes social coding platforms such as GitHub a particularly rich source of data for the study of human-bot interaction. Software development bots are used to automate repetitive tasks, interacting with their human counterparts via comments posted on the various discussion interfaces available on such platforms. One type of interaction supported by GitHub involves reacting to comments using predefined emoji. To investigate how users react to bot comments, we conducted an observational study comprising 54 million GitHub comments, with a particular focus on comments that elicited the laugh reaction. The results from our analysis suggest that some reaction types are not equally distributed across human and bot comments and that a bot's design and purpose influence the types of reactions it receives. Furthermore, while the laugh reaction is not exclusively used to express laughter, it can be used to convey humor when a bot behaves unexpectedly. These insights could inform the way bots are designed and help developers equip them with the ability to recognize and recover from unanticipated situations. In turn, bots could better support the communication, collaboration, and productivity of teams using social coding platforms.",,978-1-4503-9333-1,10.1145/3528228.3528409,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9814473,bots;humor;laugh;emoji;reactions;social coding platforms;GitHub,Productivity;Bot (Internet);Conferences;Collaboration;Encoding;Software;Behavioral sciences,,2.0,,33.0,,8 Jul 2022,,,IEEE,IEEE Conferences
11,Towards an Autonomous Bot for Automatic Source Code Refactoring,M. Wyrich; J. Bogner,"University of Stuttgart, Stuttgart, Germany; University of Applied Sciences Reutlingen, Germany University of Stuttgart, Germany",2019 IEEE/ACM 1st International Workshop on Bots in Software Engineering (BotSE),5 Sep 2019,2019,,,24,28,"Continuous refactoring is necessary to maintain source code quality and to cope with technical debt. Since manual refactoring is inefficient and error-prone, various solutions for automated refactoring have been proposed in the past. However, empirical studies have shown that these solutions are not widely accepted by software developers and most refactorings are still performed manually. For example, developers reported that refactoring tools should support functionality for reviewing changes. They also criticized that introducing such tools would require substantial effort for configuration and integration into the current development environment. In this paper, we present our work towards the Refactoring-Bot, an autonomous bot that integrates into the team like a human developer via the existing version control platform. The bot automatically performs refactorings to resolve code smells and presents the changes to a developer for asynchronous review via pull requests. This way, developers are not interrupted in their workflow and can review the changes at any time with familiar tools. Proposed refactorings can then be integrated into the code base via the push of a button. We elaborate on our vision, discuss design decisions, describe the current state of development, and give an outlook on planned development and research activities.",,978-1-7281-2262-5,10.1109/BotSE.2019.00015,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8823629,refactoring;bot;code smells;software quality improvement;maintainability;software evolution,Tools;Manuals;Bot (Internet);Productivity;Static analysis;Software quality,,38.0,,25.0,IEEE,5 Sep 2019,,,IEEE,IEEE Conferences
12,Bot Detection in GitHub Repositories,N. Chidambaram; P. R. Mazrae,"Software Engineering Lab, University of Mons, Mons, Belgium; Software Engineering Lab, University of Mons, Mons, Belgium",2022 IEEE/ACM 19th International Conference on Mining Software Repositories (MSR),21 Jun 2022,2022,,,726,728,"Contemporary social coding platforms like GitHub promote collaborative development. Many open-source software repositories hosted in these platforms use machine accounts (bots) to automate and facilitate a wide range of effort-intensive and repetitive activities. Determining if an account corresponds to a bot or a human contributor is important for socio-technical development analytics, for example, to understand how humans collaborate and interact in the presence of bots, to assess the positive and negative impact of using bots, to identify the top project contributors, to identify potential bus factors, and so on. Our project aims to include the trained machine learning (ML) classifier from the BoDeGHa bot detection tool as a plugin to the GrimoireLab software development analytics platform. In this work, we present the procedure to form a pipeline for retrieving contribution and contributor data using Perceval, distinguishing bots from humans using BoDeGHa, and visualising the results using Kibana.",2574-3864,978-1-4503-9303-4,10.1145/3524842.3528520,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9796354,,Bot (Internet);Pipelines;Data visualization;Machine learning;Organizations;Encoding;Data mining,,,,7.0,,21 Jun 2022,,,IEEE,IEEE Conferences
13,A Dataset of Bot and Human Activities in GitHub,N. Chidambaram; A. Decan; T. Mens,"Software Engineering Lab, University of Mons, Mons, Belgium; Software Engineering Lab, University of Mons, Mons, Belgium; Software Engineering Lab, University of Mons, Mons, Belgium",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),12 Jul 2023,2023,,,465,469,"Software repositories hosted on GitHub frequently use development bots to automate repetitive, effort intensive and error-prone tasks. To understand and study how these bots are used, state-of-the-art bot identification tools have been developed to detect bots based on their comments in commits, issues and pull requests. Given that bots can be involved in many other activity types, there is a need to consider more activities that they are carrying out in the software repositories they are involved in. We therefore propose a curated dataset of such activities carried out by bots and humans involved in GitHub repositories. The dataset was constructed by identifying 24 high-level activity types that could be extracted from 15 lower-level event types that were queried from GitHub’s event stream API for all considered bots and humans. The proposed dataset contains around 834K activities performed by 385 bots and 616 humans involved in GitHub repositories, during an observation period ranging from 25 November 2022 to 9 March 2023. By analysing the activity patterns of bots and humans, this dataset could lead to better bot identification tools and empirical studies on how bots play a role in collaborative software development.",2574-3864,979-8-3503-1184-6,10.1109/MSR59073.2023.00070,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10173999,software development;bot activity;dataset;GitHub event stream;empirical analysis,Codes;Collaborative software;Chatbots;Software;Distance measurement;Data mining;Task analysis,,1.0,,14.0,IEEE,12 Jul 2023,,,IEEE,IEEE Conferences
14,Should I Stale or Should I Close? An Analysis of a Bot That Closes Abandoned Issues and Pull Requests,M. Wessel; I. Steinmacher; I. Wiese; M. A. Gerosa,"University of Sao Paulo, Sao Paulo, SP, Brazil; Northern Arizona University, Flagstaff, AZ, USA; Fed. Univ. of Technology, Parana, Campo Mourao, PR, Brazil; Northern Arizona University, Flagstaff, AZ, USA",2019 IEEE/ACM 1st International Workshop on Bots in Software Engineering (BotSE),5 Sep 2019,2019,,,38,42,"On GitHub, projects use bots to automate predefined and repetitive tasks related to issues and pull requests. Our research investigates the adoption of the stale bot, which helps maintainers triaging abandoned issues and pull requests. We analyzed the bots' configuration settings and their modifications over time. These settings define the time for tagging issues and pull request as stale and closing them. We collected data from 765 OSS projects hosted on GitHub. Our results indicate that most of the studied projects made no more than three modifications in the configurations file, issues tagged as bug reports are exempt from being considered stale, while the same occurs with pull requests that need some input to be processed.",,978-1-7281-2262-5,10.1109/BotSE.2019.00018,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8823598,"bots, open source software, abandoned issues",Computer bugs;Bot (Internet);Task analysis;Open source software;Labeling;Tagging;Indexes,,21.0,,20.0,IEEE,5 Sep 2019,,,IEEE,IEEE Conferences
15,Detecting Bot on GitHub Leveraging Transformer-based Models: A Preliminary Study,J. Zhang; X. Wu; Y. Zhang; S. Xu,"Hunan Normal University, Changsha, China; Hunan Normal University, Changsha, China; National University of Defense Technology, Changsha, China; Hunan Normal University, Changsha, China",2023 30th Asia-Pacific Software Engineering Conference (APSEC),2 Apr 2024,2023,,,639,640,"Bots are prevalent contributors in collaborative software development, necessitating accurate detection techniques. This preliminary study aims to leveraging public datasets and Transformer-based models (i.e., BERT, CodeBERT, RoBERTa, BART, and PLBART) for the bot detection task. Our experimental result reveals that CodeBERT achieves the highest performance, with an impressive accuracy score of 94.1%.",2640-0715,979-8-3503-4417-2,10.1109/APSEC60848.2023.00087,"National Natural Science Foundation of China(grant numbers:62141209,61972055); ",https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10479365,GitHub;Bot detection;DL models,Collaborative software;Chatbots;Transformers;Task analysis;Software engineering;Software development management,,,,11.0,IEEE,2 Apr 2024,,,IEEE,IEEE Conferences
16,BotHunter: An Approach to Detect Software Bots in GitHub,A. Abdellatif; M. Wessel; I. Steinmacher; M. A. Gerosa; E. Shihab,"Concordia University, Montreal, Canada; Delft University of Technology, Delft, Netherlands; Universidade Tecnológica Federal do Paraná, Campo Mourão, Brazil; Northern Arizona University, Flagstaff, USA; Concordia University, Montreal, Canada",2022 IEEE/ACM 19th International Conference on Mining Software Repositories (MSR),21 Jun 2022,2022,,,6,17,"Bots have become popular in software projects as they play critical roles, from running tests to fixing bugs/vulnerabilities. However, the large number of software bots adds extra effort to practitioners and researchers to distinguish human accounts from bot accounts to avoid bias in data-driven studies. Researchers developed several approaches to identify bots at specific activity levels (issue/pull request or commit), considering a single repository and disregarding features that showed to be effective in other domains. To address this gap, we propose using a machine learning-based approach to identify the bot accounts regardless of their activity level. We selected and extracted 19 features related to the account's profile information, activities, and comment similarity. Then, we evaluated the performance of five machine learning classifiers using a dataset that has more than 5,000 GitHub accounts. Our results show that the Random Forest classifier performs the best, with an F1-score of 92.4% and AUC of 98.7%. Furthermore, the account profile information (e.g., account login) contains the most relevant features to identify the account type. Finally, we compare the performance of our Random Forest classifier to the state-of-the-art approaches, and our results show that our model outperforms the state-of-the-art techniques in identifying the account type regardless of their activity level.",2574-3864,978-1-4503-9303-4,10.1145/3524842.3527959,"National Science Foundation(grant numbers:1815503,1900903); CNPq(grant numbers:313067/2020-1); ",https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9796262,Software Bots;Empirical Software Engineering,Bot (Internet);Feature extraction;Transformers;Software;Encoding;Data mining;Time factors,,5.0,,53.0,,21 Jun 2022,,,IEEE,IEEE Conferences
17,How Do Software Developers Use GitHub Actions to Automate Their Workflows?,T. Kinsman; M. Wessel; M. A. Gerosa; C. Treude,"University of Adelaide, Australia; University of São Paulo, Brazil; Northern Arizona University, USA; University of Adelaide, Australia",2021 IEEE/ACM 18th International Conference on Mining Software Repositories (MSR),28 Jun 2021,2021,,,420,431,"Automated tools are frequently used in social coding repositories to perform repetitive activities that are part of the distributed software development process. Recently, GitHub introduced GitHub Actions, a feature providing automated work-flows for repository maintainers. Although several Actions have been built and used by practitioners, relatively little has been done to evaluate them. Understanding and anticipating the effects of adopting such kind of technology is important for planning and management. Our research is the first to investigate how developers use Actions and how several activity indicators change after their adoption. Our results indicate that, although only a small subset of repositories adopted GitHub Actions to date, there is a positive perception of the technology. Our findings also indicate that the adoption of GitHub Actions increases the number of monthly rejected pull requests and decreases the monthly number of commits on merged pull requests. These results are especially relevant for practitioners to understand and prevent undesirable effects on their projects.",2574-3864,978-1-7281-8710-5,10.1109/MSR52588.2021.00054,Coordenação de Aperfeiçoamento de Pessoal de Nível Superior; Australian Research Council; ,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9463074,GitHub Actions;GitHub Bots;Automated work-flow;Regression Discontinuity Design,Tools;Encoding;Data models;Planning;Data mining;IEEE activities;Open source software,,34.0,,37.0,IEEE,28 Jun 2021,,,IEEE,IEEE Conferences
18,Suggestion Bot: Analyzing the Impact of Automated Suggested Changes on Code Reviews,N. Palvannan; C. Brown,"Department of Computer Science, Virginia Tech, Virginia, USA; Department of Computer Science, Virginia Tech, Virginia, USA",2023 IEEE/ACM 5th International Workshop on Bots in Software Engineering (BotSE),27 Jul 2023,2023,,,33,37,"Peer code reviews are crucial for maintaining the quality of the code in software repositories. Developers have introduced a number of software bots to help with the code review process. Despite the benefits of automating code review tasks, many developers face challenges interacting with these bots due to non-comprehensive feedback and disruptive notifications. In this paper, we analyze how incorporating a bot in software development cycle will decrease turnaround time of pull request. We created a bot called “SUGGESTION BOT” to automatically review the code base using GitHub’s suggested changes functionality in order to solve this issue. A preliminary comparative empirical investigation between the utilization of this bot and manual review procedures was also conducted in this study. We evaluate SUGGESTION BOT concerning its impact on review time and also analyze whether the comments given by the bot are clear and useful for users. Our results provide implications for the design of future systems and improving human-bot interactions for code review.",,979-8-3503-0212-7,10.1109/BotSE59190.2023.00015,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10190399,Pull Requests;Peer Code Reviews;Code Review Bot;Suggested changes,Codes;Conferences;Manuals;Chatbots;Software;Task analysis;Faces,,3.0,,22.0,IEEE,27 Jul 2023,,,IEEE,IEEE Conferences
19,On Twitter Bots Behaving Badly: A Manual and Automated Analysis of Python Code Patterns on GitHub,A. Millimaggi; F. Daniel,"Politecnico di Milano, Milan, Italy; Politecnico di Milano, Milan, Italy",Journal of Web Engineering,22 Sep 2023,2019,18.0,8.0,801,835,"Bots, i.e., algorithmically driven entities that behave like humans in online communications, are increasingly infiltrating social conversations on the Web. If not properly prevented, this presence of bots may cause harm to the humans they interact with. This article aims to understand which types of abuse may lead to harm and whether these can be considered intentional or not. We manually review a dataset of 60 Twitter bot code repositories on GitHub, derive a set of potentially abusive actions, characterize them using a taxonomy of abstract code patterns, and assess the potential abusiveness of the patterns. The article then describes the design and implementation of a code pattern recognizer and uses the pattern recognizer to automatically analyze a dataset of 786 Python bot code repositories. The study does not only reveal the existence of 28 communication-specific code patterns - which could be used to assess the harmfulness of bot code - but also their consistent presence throughout all studied repositories.",1544-5976,,10.13052/jwe1540-9589.1883,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10247296,Bots;Harm;Abuse;Code patterns;Pattern recognition;GitHub;Twitter;Python,Codes;Social networking (online);Blogs;Taxonomy;Oral communication;Manuals;Chatbots,,1.0,,17.0,,22 Sep 2023,,,River Publishers,River Publishers Journals
20,Together or Apart? Investigating a mediator bot to aggregate bot’s comments on pull requests,E. Ribeiro; R. Nascimento; I. Steinmacher; L. Xavier; M. Gerosa; H. de Paula; M. Wessel,"Pontifical Catholic University of Minas Gerais, Brazil; Pontifical Catholic University of Minas Gerais, Brazil; Northern Arizona University, USA; Pontifical Catholic University of Minas Gerais, Brazil; Pontifical Catholic University of Minas Gerais, Brazil; Pontifical Catholic University of Minas Gerais, Brazil; Radboud University, The Netherlands",2022 IEEE International Conference on Software Maintenance and Evolution (ICSME),19 Dec 2022,2022,,,434,438,"Software bots connect users and tools, streamlining the pull request review process in social coding platforms. However, bots can introduce information overload into developers’ communication. Information overload is especially problematic for newcomers, who are still exploring the project and may feel overwhelmed by the number of messages. Inspired by the literature of other domains, we designed and evaluated FunnelBot, a bot that acts as a mediator between developers and other bots in the repository. We conducted a within-subject study with 25 newcomers to capture their perceptions and preferences. Our results provide insights for bot developers who want to mitigate noise and create bots for supporting newcomers, laying a foundation for designing better bots.",2576-3148,978-1-6654-7956-1,10.1109/ICSME55016.2022.00054,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9978219,Software Bots;GitHub Bots;Open Source Software;Software Engineering,Software maintenance;Aggregates;Chatbots;Encoding;Software development management,,1.0,,15.0,IEEE,19 Dec 2022,,,IEEE,IEEE Conferences
21,Classifying Issues into Custom Labels in GitBot,D. Park; H. Cho; S. Lee,"Department of AI Convergence Engineering, Gyeongsang National University, Jinju, Republic of Korea; Department of AI Convergence Engineering, Gyeongsang National University, Jinju, Republic of Korea; Department of AI Convergence Engineering, Gyeongsang National University, Jinju, Republic of Korea",2022 IEEE/ACM 4th International Workshop on Bots in Software Engineering (BotSE),8 Jul 2022,2022,,,28,32,"GitBots are bots in Git repositories to automate repetitive tasks that occur in software development, testing and maintenance. Git-Bots are expected to perform the repetitive tasks that are normally done by humans, such as feedback on issue reports and answers to questions. However, studies on GitBots for labeling issue reports fall short of replacing developers' labeling tasks. Developers still manually attach labels to issues. In this paper, we introduce an issue labeling bot classifying issue reports into custom labels that developers define by themselves so that our bot could attach labels in a similar way to human behavior.",,978-1-4503-9333-1,10.1145/3528228.3528404,National Research Foundation of Korea (NRF)(grant numbers:NRF-2021R1A2C1094167); ,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9814612,Classification;FastText;Custom label;GitBot;Issue report,Bot (Internet);Conferences;Maintenance engineering;Software;Software reliability;Behavioral sciences;Labeling,,3.0,,24.0,,8 Jul 2022,,,IEEE,IEEE Conferences
22,"Bots for Pull Requests: The Good, the Bad, and the Promising",M. Wessel; A. Abdellatif; I. Wiese; T. Conte; E. Shihab; M. A. Gerosa; I. Steinmacher,"Delft University of Technology, Netherlands; Concordia University, Canada; Universidade Tecnologica Federal do Parana, Brazil; Federal University of Amazonas, Brazil; Concordia University, Canada; Northern Arizona University, USA; Universidade Tecnologica Federal do Parana, Brazil",2022 IEEE/ACM 44th International Conference on Software Engineering (ICSE),20 Jun 2022,2022,,,274,286,"Software bots automate tasks within Open Source Software (OSS) projects' pull requests and save reviewing time and effort (“the good”). However, their interactions can be disruptive and noisy and lead to information overload (“the bad”). To identify strategies to overcome such problems, we applied Design Fiction as a participatory method with 32 practitioners. We elicited 22 design strategies for a bot mediator or the pull request user interface (“the promising”). Participants envisioned a separate place in the pull request interface for bot interactions and a bot mediator that can summarize and customize other bots' actions to mitigate noise. We also collected participants' perceptions about a prototype implementing the envisioned strategies. Our design strategies can guide the development of future bots and social coding platforms.",1558-1225,978-1-4503-9221-1,10.1145/3510003.3512765,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9793907,Software Bots;GitHub Bots;Human-bot Interaction;Open Source Software;Automation;Collaborative Development;Design Fiction,Bot (Internet);Prototypes;User interfaces;Encoding;Noise measurement;Task analysis;Open source software,,6.0,,69.0,CCBY,20 Jun 2022,,,IEEE,IEEE Conferences
23,Improving Feedback on GitHub Pull Requests: A Bots Approach,Z. Hu; E. F. Gehringer,"Department of Computer Science, North Carolina State University, Raleigh, USA; Department of Computer Science, North Carolina State University, Raleigh, USA",2019 IEEE Frontiers in Education Conference (FIE),12 Mar 2020,2019,,,1,9,"Rising enrollments make it difficult for instructors and teaching assistants to give adequate feedback on each student's work. Our course projects require students to submit GitHub pull requests as deliverables for their open-source software (OSS) projects. We have set up a static code analyzer and a continuous integration service on GitHub to help students check different aspects of the code. However, these tools have some limitations. In this paper, we discuss how we bypass the limitations of existing tools by implementing three Internet bots. These bots are either open source or free for OSS projects and can be easily integrated with any GitHub repositories. One-hundred one Computer Science and Computer Engineering masters students participated in our study. The survey results showed that more than 84% of students thought bots can help them to contribute code with better quality. We analyzed 396 pull requests. Results revealed that bots can provide more timely feedback than teaching staff. The Danger Bot is associated with a significant reduction system-specific guideline violations (by 39%), and the Code Climate Bot is associated with a significant 60% decrease of code smells in student contributions. However, we found that the Travis CI Bot did not help student contributions pass automated tests.",2377-634X,978-1-7281-1746-1,10.1109/FIE43999.2019.9028685,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9028685,Internet bots;open-source software;software engineering;open-source curriculum;automated feedback;Expertiza,Tools;Bot (Internet);Meteorology;Guidelines;Education;Programming,,6.0,,17.0,IEEE,12 Mar 2020,,,IEEE,IEEE Conferences
24,Effects of Adopting Code Review Bots on Pull Requests to OSS Projects,M. Wessel; A. Serebrenik; I. Wiese; I. Steinmacher; M. A. Gerosa,"University of São Paulo, Brazil; Eindhoven University of Technology, The Netherlands; Universidade Tecnológica Federal do Paraná, Campo Mourão, Brazil; Universidade Tecnológica Federal do Paraná, Campo Mourão, Brazil; Northern Arizona University, USA",2020 IEEE International Conference on Software Maintenance and Evolution (ICSME),2 Nov 2020,2020,,,1,11,"Software bots, which are widely adopted by Open Source Software (OSS) projects, support developers on several activities, including code review. However, as with any new technology adoption, bots may impact group dynamics. Since understanding and anticipating such effects is important for planning and management, we investigate how several activity indicators change after the adoption of a code review bot. We employed a regression discontinuity design on 1,194 software projects from GitHub. Our results indicate that the adoption of code review bots increases the number of monthly merged pull requests, decreases monthly non-merged pull requests, and decreases communication among developers. Practitioners and maintainers may leverage our results to understand, or even predict, bot effects on their projects' social interactions.",2576-3148,978-1-7281-5619-4,10.1109/ICSME46990.2020.00011,Coordenação de Aperfeiçoamento de Pessoal de Nível Superior; National Science Foundation; ,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9240622,Software Bots;GitHub Bots;Code Review;Open Source Software;Software Engineering,Bot (Internet);Software maintenance;Encoding;Data models;Planning;Open source software;Software development management,,31.0,,41.0,IEEE,2 Nov 2020,,,IEEE,IEEE Conferences
25,Understanding the Impact of Bots on Developers Sentiment and Project Progress,A. Gao; S. Chen; T. Wang; J. Deng,"College of Computer, National University of Defense Technology, Changsha, China; College of Computer, National University of Defense Technology, Changsha, China; College of Computer, National University of Defense Technology, Changsha, China; College of Computer, National University of Defense Technology, Changsha, China",2022 IEEE 13th International Conference on Software Engineering and Service Science (ICSESS),31 Oct 2022,2022,,,93,96,"Software developers advance the project process by contributing and discussing on the code platform. Software bot acts as an assistant to help developers deal with repetitive tasks. In this paper, we explore whether the adoption of bots has an impact on developer sentiment and projects progress. We collected issues, pull requests and comments from GitHub popular projects. And we found that human users had significantly reduced positive sentiment in bot-created issues and PRs. The average merging time of the bot-created PRs is significantly shorter than human-created ones. The average solving time of bot-commented issues is significantly longer than human-created ones.",2327-0594,978-1-6654-1032-8,10.1109/ICSESS54813.2022.9930282,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9930282,Software Engineering;Software Bots;Sentiment Analysis,Sentiment analysis;Codes;Merging;Chatbots;Software;Behavioral sciences;Task analysis,,,,10.0,IEEE,31 Oct 2022,,,IEEE,IEEE Conferences
26,BDGOA: A bot detection approach for GitHub OAuth Apps,Z. Liao; X. Huang; B. Zhang; J. Wu; Y. Cheng,"School of Computer Science and Engineering, Central South University, Changsha, China; School of Computer Science and Engineering, Central South University, Changsha, China; School of Computer Science and Engineering, Central South University, Changsha, China; School of Artificial Intelligence, Guilin University of Electronic Technology, Guilin, China; Hunan Glozeal Science and Technology Co., Ltd., Changsha, China",Intelligent and Converged Networks,16 Oct 2023,2023,4.0,3.0,181,197,"As various software bots are widely used in open source software repositories, some drawbacks are coming to light, such as giving newcomers non-positive feedback and misleading empirical studies of software engineering researchers. Several techniques have been proposed by researchers to perform bot detection, but most of them are limited to identifying bots performing specific activities, let alone distinguishing between GitHub App and OAuth App. In this paper, we propose a bot detection technique for OAuth App, named BDGOA. 24 features are used in BDGOA, which can be divided into three dimensions: account information, account activity, and text similarity. To better explore the behavioral features, we define a fine-grained classification of behavioral events and introduce self-similarity to quantify the repeatability of behavioral sequence. We leverage five machine learning classifiers on the benchmark dataset to conduct bot detection, and finally choose random forest as the classifier, which achieves the highest F1-score of 95.83%. The experimental results comparing with the state-of-the-art approaches also demonstrate the superiority of BDGOA.",2708-6240,,10.23919/ICN.2023.0006,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10286551,Github;DevBots;machine learning;text similarity,Stability criteria;Stars;Benchmark testing;Chatbots;Feature extraction;Robustness;Behavioral sciences,,,,30.0,,16 Oct 2023,,,TUP,TUP Journals
27,Recognizing Bot Activity in Collaborative Software Development,M. Golzadeh; T. Mens; A. Decan; E. Constantinou; N. Chidambaram,University of Mons; University of Mons; University of Mons; Eindhoven University of Technology; University of Mons,IEEE Software,23 Aug 2022,2022,39.0,5.0,56,61,"Using popular open source projects on GitHub, we provide evidence that bots are regularly among the most active contributors, even though GitHub does not explicitly acknowledge their presence. This poses a problem for techniques that analyze human contributor activity.",1937-4194,,10.1109/MS.2022.3178601,"DigitalWallonia4.AI research project ARIAC(grant numbers:2010235); Fonds de la Recherche Scientifique–FNRS(grant numbers:O.0157.18F-RG43,T.0017.18); ",https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9782582,machine account;bot identification;contributor activity;developer contribution,Software development management;Bot (Internet);Task analysis;Open source software;Software engineering;Manuals;Encoding,,2.0,,21.0,IEEE,26 May 2022,,,IEEE,IEEE Magazines
28,"Human, bot or both? A study on the capabilities of classification models on mixed accounts",N. Cassee; C. Kitsanelis; E. Constantinou; A. Serebrenik,"Eindhoven University of Technology, The Netherlands; Eindhoven University of Technology, The Netherlands; Eindhoven University of Technology, The Netherlands; Eindhoven University of Technology, The Netherlands",2021 IEEE International Conference on Software Maintenance and Evolution (ICSME),24 Nov 2021,2021,,,654,658,"Several bot detection algorithms have recently been discussed in the literature, as software bots that perform maintenance tasks have become more popular in recent years. State-of-the-art techniques detect bots based on a binary classification, where a GitHub account is either a human or a bot. However, this conceptualisation of bot detection as an account-level binary classification problem fails to account for ‘mixed accounts’, accounts that are shared between a human and a bot, and that therefore exhibit both bot and human activity. By using binary classification models for bot detection, researchers might hence mischaracterize both human and bot behavior in software maintenance. This calls for conceptualisation of bot detection through a comment-level classification. However, the single such approach solely investigates a small number of mixed account comments. The nature of mixed accounts on GitHub is thus yet unknown, and the absence of appropriate datasets make this a difficult problem to study. In this paper, we investigate three comment-level classification models and we evaluate these classifiers on a manually labeled dataset of mixed accounts. We find that the best classifiers based on these classification models achieve a precision and recall between 88% and 96%. However, even the most accurate comment-level classifier cannot accurately detect mixed accounts; rather, we find that textual content alone, or textual content combined with templates used by bots, are very effective features for the detection of both bot and mixed accounts. Our study calls for more accurate bot detection techniques capable of identifying mixed accounts, and as such supporting more refined insights in software maintenance activities performed by humans and bots on social coding sites.",2576-3148,978-1-6654-2882-8,10.1109/ICSME52107.2021.00075,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9609135,bot identification;classification model;social coding platforms;GitHub;software engineering,Bot (Internet);Software maintenance;Software algorithms;Maintenance engineering;Feature extraction;Reliability engineering;Encoding,,3.0,,29.0,IEEE,24 Nov 2021,,,IEEE,IEEE Conferences
29,Interactive Refactoring Documentation Bot,S. Rebai; O. Ben Sghaier; V. Alizadeh; M. Kessentini; M. Chater,"CIS Department, University of Michigan, Dearborn, Michigan, USA; CIS Department, University of Michigan, Dearborn, MI, USA; CIS Department, University of Michigan, Dearborn, Michigan, USA; CIS Department, University of Michigan, Dearborn, Michigan, USA; CIS Department, University of Michigan, Dearborn, Michigan, USA",2019 19th International Working Conference on Source Code Analysis and Manipulation (SCAM),12 Dec 2019,2019,,,152,162,"The documentation of code changes is significantly important but developers ignore it, most of the time, due to the pressure of the deadlines. While developers may document the most important features modification or bugs fixing, recent empirical studies show that the documentation of quality improvements and/or refactoring is often omitted or not accurately described. However, the automated or semi-automated documentation of refactorings has not been yet explored despite the extensive work on the remaining steps of refactoring including the detection, prioritization and recommendation. In this paper, we propose a semi-automated refactoring documentation bot that helps developers to interactively check and validate the documentation of the refactorings and/or quality improvements at the file level for each opened pull-request before being reviewed or merged to the master. The bot starts by checking the pullrequest if there are significant quality changes and refactorings at the file level and whether they are documented by the developer. Then, it checks the validity of the developers description of the refactorings, if any. Based on that analysis, the documentation bot will recommend a message to document the refactorings, their locations and the quality improvement for that pull-request when missing information is found. Then, the developer can modify his pull request description by interacting with the bot to accept/modify/reject part of the proposed documentation. Since refactoring do not happen in isolation most of the time, the bot is documenting the impact of a sequence of refactorings, in a pull-request, on quality and not each refactoring in isolation. We conducted a human survey with 14 active developers to manually evaluate the relevance and the correctness of our tool on different pull requests of 5 open source projects and one industrial system. The results show that the participants found that our bot facilitates the documentation of their quality-related changes and refactorings.",2470-6892,978-1-7281-4937-0,10.1109/SCAM.2019.00026,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8930873,Intelligent bot;refactoring;documentation,Documentation;Measurement;Feature extraction;Tools;Software;Couplings;Security,,4.0,,49.0,IEEE,12 Dec 2019,,,IEEE,IEEE Conferences
30,FixMe: A GitHub Bot for Detecting and Monitoring On-Hold Self-Admitted Technical Debt,S. Phaithoon; S. Wongnil; P. Pussawong; M. Choetkiertikul; C. Ragkhitwetsagul; T. Sunetnanta; R. Maipradit; H. Hata; K. Matsumoto,"Faculty of Information and Communication Technology (ICT), Mahidol University, Nakhon Pathom, Thailand; Faculty of Information and Communication Technology (ICT), Mahidol University, Nakhon Pathom, Thailand; Faculty of Information and Communication Technology (ICT), Mahidol University, Nakhon Pathom, Thailand; Faculty of Information and Communication Technology (ICT), Mahidol University, Nakhon Pathom, Thailand; Faculty of Information and Communication Technology (ICT), Mahidol University, Nakhon Pathom, Thailand; Faculty of Information and Communication Technology (ICT), Mahidol University, Nakhon Pathom, Thailand; Nara Institute of Science and Technology (NAIST), Nara, Japan; Shinshu University, Nagano, Japan; Faculty of Information and Communication Technology (ICT), Mahidol University, Nakhon Pathom, Thailand",2021 36th IEEE/ACM International Conference on Automated Software Engineering (ASE),20 Jan 2022,2021,,,1257,1261,"Self-Admitted Technical Debt (SATD) is a special form of technical debt in which developers intentionally record their hacks in the code by adding comments for attention. Here, we focus on issue-related ""On-hold SATD"", where developers suspend proper implementation due to issues reported inside or outside the project. When the referenced issues are resolved, the On-hold SATD also need to be addressed, but since monitoring these issue reports takes a lot of time and effort, developers may not be aware of the resolved issues and leave the On-hold SATD in the code. In this paper, we propose FixMe, a GitHub bot that helps developers detecting and monitoring On-hold SATD in their repositories and notify them whenever the On-hold SATDs are ready to be fixed (i.e. the referenced issues are resolved). The bot can automatically detect On-hold SATD comments from source code using machine learning techniques and discover referenced issues. When the referenced issues are resolved, developers will be notified by FixMe bot. The evaluation conducted with 11 participants shows that our FixMe bot can support them in dealing with On-hold SATD. FixMe is available at https://www.fixmebot.app/ and FixMe's VDO is at https://youtu.be/YSz9kFxN_YQ.",2643-1572,978-1-6654-0337-5,10.1109/ASE51524.2021.9678680,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9678680,,Computer science;Codes;Filtering;Machine learning;Software;Usability;Monitoring,,4.0,,10.0,IEEE,20 Jan 2022,,,IEEE,IEEE Conferences
31,Analysis ChatGPT Potential: Transforming Software Development with AI Chat Bots,J. W. Purwoko; T. Abdullah; B. Wijaya; A. A. Santoso Gunawan; K. E. Saputra,"Department School of Computer Science, Computer Science, Bina Nusantara University, Jakarta, Indonesia; Department School of Computer Science, Computer Science, Bina Nusantara University, Jakarta, Indonesia; Department School of Computer Science, Computer Science, Bina Nusantara University, Jakarta, Indonesia; Department School of Computer Science, Computer Science, Bina Nusantara University, Jakarta, Indonesia; Department School of Computer Science, Computer Science, Bina Nusantara University, Jakarta, Indonesia","2023 International Conference on Networking, Electrical Engineering, Computer Science, and Technology (IConNECT)",27 Nov 2023,2023,,,36,41,"Artificial intelligence (AI) is a technology that is constantly evolving and is being applied more frequently in many facets of society, including product and service development. Chatbots, which are computer programs that can connect with people through chat or voice apps, are one sort of AI that is evolving quickly. However, there is still much debate among scientists and professionals about whether AI advancements like ChatGPT can help software engineers with their daily tasks or even replace the work of software engineers. So, on this occasion, we conduct research on whether AI (artificial intelligence) is capable of helping software engineers and how far AI can assist software engineers. In this study, we aim to evaluate the effectiveness of ChatGPT as an AI tool for code retrieval and its potential to help or replace software engineers. Our research methodology involves using ChatGPT to refactor provided code and make a simple application from scratch. The results of this research show that AI chatbot models like ChatGPT cannot replace software developers 100",,979-8-3503-3117-2,10.1109/IConNECT56593.2023.10327087,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10327087,Artificial Intelligent;Software Development;Chat Bot,Codes;Computational modeling;Training data;Programming;Chatbots;Software;Security,,,,27.0,IEEE,27 Nov 2023,,,IEEE,IEEE Conferences
32,Guidelines for Developing Bots for GitHub,M. Wessel; A. Zaidman; M. A. Gerosa; I. Steinmacher,"Department of Software Science, Radboud University, Nijmegen, The Netherlands; Software Engineering, Delft University of Technology, Delft, The Netherlands; Professor, Northern Arizona University, Flagstaff, AZ, USA; School of Informatics, Computing, and Cyber Systems, Northern Arizona University, Flagstaff, AZ, USA",IEEE Software,26 Apr 2023,2023,40.0,3.0,72,79,"Projects on GitHub rely on the automation provided by software development bots. Nevertheless, the presence of bots can be annoying and disruptive to the community. Backed by multiple studies with practitioners, this article provides guidelines for developing and maintaining software bots.",1937-4194,,10.1109/MS.2022.3224813,"CNPq(grant numbers:141222/2018-2,314174/2020-6,313067/2020-1); National Science Foundation(grant numbers:1815503,1900903); ",https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9976032,,Chatbots;Guidelines;Software development management;Codes;Task analysis;Prototypes;Computer applications,,4.0,,10.0,IEEE,8 Dec 2022,,,IEEE,IEEE Magazines
33,"Expecting the Unexpected: Distilling Bot Development, Challenges, and Motivations",A. M. Pinheiro; C. S. Rabello; L. B. Furtado; G. Pinto; C. R. B. de Souza,"Federal University of Pará, Belém, Brazil; Federal University of Pará, Belém, Brazil; Federal University of Pará, Belém, Brazil; Federal University of Pará, Belém, Brazil; Federal University of Pará, Belém, Brazil",2019 IEEE/ACM 12th International Workshop on Cooperative and Human Aspects of Software Engineering (CHASE),29 Aug 2019,2019,,,51,52,"Software bots are becoming an increasingly popular tool in the software development landscape, which is particularly due to their potential of use in several different contexts. More importantly, software developers interested in transitioning to bot development may have to face challenges intrinsic related to bot software development. However, so far, it is still unclear what is the profile of bot developers, what motivate them, or what challenges do they face when dealing with bot development. To shed an initial light on this direction, we conducted a survey with 43 Github users who have been involved (showing their interest or actively contributing to) in bot software projects.",2574-1837,978-1-7281-2239-7,10.1109/CHASE.2019.00021,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8817003,software engineering;security;discourse;natural language processing,Bot (Internet);Software;Tools;Face;Employment;Meteorology;Task analysis,,1.0,,5.0,IEEE,29 Aug 2019,,,IEEE,IEEE Conferences
34,Autonomy Is An Acquired Taste: Exploring Developer Preferences for GitHub Bots,A. Ghorbani; N. Cassee; D. Robinson; A. Alami; N. A. Ernst; A. Serebrenik; A. Wąsowski,"University of Victoria, Canada; University of Victoria, Canada; University of Victoria, Canada; Aalborg University, Denmark; University of Victoria, Canada; Eindhoven University of Technology, The Netherlands; IT University of Copenhagen, Denmark",2023 IEEE/ACM 45th International Conference on Software Engineering (ICSE),14 Jul 2023,2023,,,1405,1417,"Software bots fulfill an important role in collective software development, and their adoption by developers promises increased productivity. Past research has identified that bots that communicate too often can irritate developers, which affects the utility of the bot. However, it is not clear what other properties of human-bot collaboration affect developers' preferences, or what impact these properties might have. The main idea of this paper is to explore characteristics affecting developer preferences for interactions between humans and bots, in the context of GitHub pull requests. We carried out an exploratory sequential study with interviews and a subsequent vignette-based survey. We find developers generally prefer bots that are personable but show little autonomy, however, more experienced developers tend to prefer more autonomous bots. Based on this empirical evidence, we recommend bot developers increase configuration options for bots so that individual developers and projects can configure bots to best align with their own preferences and project cultures.",1558-1225,978-1-6654-5701-9,10.1109/ICSE48619.2023.00123,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10172895,Software Bot;Pull Request;Human Aspects,Surveys;Productivity;Collaboration;Chatbots;Software;Interviews;Software development management,,1.0,,55.0,IEEE,14 Jul 2023,,,IEEE,IEEE Conferences
35,How Does Bot Affect Developer’s Sentiment: An Empirical Study on GitHub Issues and PRs,A. Gao; Y. Zhang; T. Wang; S. Chen; J. Deng,"National University of Defense Technology, Changsha, China; National University of Defense Technology, Changsha, China; National University of Defense Technology, Changsha, China; National University of Defense Technology, Changsha, China; National University of Defense Technology, Changsha, China","2022 IEEE Smartworld, Ubiquitous Intelligence & Computing, Scalable Computing & Communications, Digital Twin, Privacy Computing, Metaverse, Autonomous & Trusted Vehicles (SmartWorld/UIC/ScalCom/DigitalTwin/PriComp/Meta)",27 Jul 2023,2022,,,1856,1861,"Software bots act as assistants to help developers in GitHub issues and pull requests (PRs) solution. In this paper, we explore whether software bots affect developer’s sentiment through an empirical study. We find that developers express more neutral sentiment in bot-involved projects and have more positive sentiment in bot-involved issues and PRs. Further, we find developers are less positive in issues and PRs created by bots. To Figure out how developer’s sentiment looks like when mention bots, we use a combination of quantitative and qualitative analyses to explore the different sentiment of developers toward bots and explain the reasons.",,979-8-3503-4655-8,10.1109/SmartWorld-UIC-ATC-ScalCom-DigitalTwin-PriComp-Metaverse56740.2022.00268,National Natural Science Foundation of China; ,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10189701,Bot;Software Engineering;Sentiment Analysis,Collaboration;Chatbots;Software;Software development management,,1.0,,19.0,IEEE,27 Jul 2023,,,IEEE,IEEE Conferences
36,From Specialized Mechanics to Project Butlers: The Usage of Bots in Open Source Software Development,Z. Wang; Y. Wang; D. Redmiles,"University of California, Irvine; University of Posts and Telecommunications, Beijing; University of California, Irvine",IEEE Software,23 Aug 2022,2022,39.0,5.0,38,43,We seek to identify how open source software (OSS) projects adopt bot services from a diverse set of selections. Our empirical research examines bot usage in the most popular OSS repositories in GitHub.,1937-4194,,10.1109/MS.2022.3180297,National Natural Science Foundation of China(grant numbers:62172049); ,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9789275,,Software development management;Bot (Internet);Task analysis;Software;Codes;Automation;Protocols,,5.0,,11.0,CCBY,6 Jun 2022,,,IEEE,IEEE Magazines
37,Automating Dependency Updates in Practice: An Exploratory Study on GitHub Dependabot,R. He; H. He; Y. Zhang; M. Zhou,"School of Computer Science, Peking University, Beijing, China; School of Computer Science, Peking University, Beijing, China; School of Computer Science and Technology, Beijing Institute of Technology, Beijing, China; School of Computer Science, Peking University, Beijing, China",IEEE Transactions on Software Engineering,14 Aug 2023,2023,49.0,8.0,4004,4022,"Dependency management bots automatically open pull requests to update software dependencies on behalf of developers. Early research shows that developers are suspicious of updates performed by dependency management bots and feel tired of overwhelming notifications from these bots. Despite this, dependency management bots are becoming increasingly popular. Such contrast motivates us to investigate Dependabot, currently the most visible bot on GitHub, to reveal the effectiveness and limitations of state-of-art dependency management bots. We use exploratory data analysis and a developer survey to evaluate the effectiveness of Dependabot in keeping dependencies up-to-date, interacting with developers, reducing update suspicion, and reducing notification fatigue. We obtain mixed findings. On the positive side, projects do reduce technical lag after Dependabot adoption and developers are highly receptive to its pull requests. On the negative side, its compatibility scores are too scarce to be effective in reducing update suspicion; developers tend to configure Dependabot toward reducing the number of notifications; and 11.3% of projects have deprecated Dependabot in favor of other alternatives. The survey confirms our findings and provides insights into the key missing features of Dependabot. Based on our findings, we derive and summarize the key characteristics of an ideal dependency management bot which can be grouped into four dimensions: configurability, autonomy, transparency, and self-adaptability.",1939-3520,,10.1109/TSE.2023.3278129,National Key R&D Program of China; National Natural Science Foundation of China(grant numbers:61825201); ,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10130588,Dependabot;dependency management;mining software repositories;software engineering bot,Chatbots;Software development management;Software;Software engineering;Security;Fatigue;Surveys,,6.0,,112.0,IEEE,22 May 2023,,,IEEE,IEEE Journals
38,RefBot: Intelligent Software Refactoring Bot,V. Alizadeh; M. A. Ouali; M. Kessentini; M. Chater,"Software Engineering Intelligence Lab, University of Michigan, USA; Software Engineering Intelligence Lab, University of Michigan, USA; Software Engineering Intelligence Lab, University of Michigan, USA; Software Engineering Intelligence Lab, University of Michigan, USA",2019 34th IEEE/ACM International Conference on Automated Software Engineering (ASE),9 Jan 2020,2019,,,823,834,"The adoption of refactoring techniques for continuous integration received much less attention from the research community comparing to root-canal refactoring to fix the quality issues in the whole system. Several recent empirical studies show that developers, in practice, are applying refactoring incrementally when they are fixing bugs or adding new features. There is an urgent need for refactoring tools that can support continuous integration and some recent development processes such as DevOps that are based on rapid releases. Furthermore, several studies show that manual refactoring is expensive and existing automated refactoring tools are challenging to configure and integrate into the development pipelines with significant disruption cost. In this paper, we propose, for the first time, an intelligent software refactoring bot, called RefBot. Integrated into the version control system (e.g. GitHub), our bot continuously monitors the software repository, and it is triggered by any ""open"" or ""merge"" action on pull requests. The bot analyzes the files changed during that pull request to identify refactoring opportunities using a set of quality attributes then it will find the best sequence of refactorings to fix the quality issues if any. The bot recommends all these refactorings through an automatically generated pull-request. The developer can review the recommendations and their impacts in a detailed report and select the code changes that he wants to keep or ignore. After this review, the developer can close and approve the merge of the bot's pull request. We quantitatively and qualitatively evaluated the performance and effectiveness of RefBot by a survey conducted with experienced developers who used the bot on both open source and industry projects.",2643-1572,978-1-7281-2508-4,10.1109/ASE.2019.00081,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8952287,Software bot;refactoring;Software quality,Software;Tools;Bot (Internet);Measurement;Manuals;Pipelines;Object oriented modeling,,23.0,,49.0,IEEE,9 Jan 2020,,,IEEE,IEEE Conferences
39,Bobble-Bot: An educational platform for real-time control with ROS,M. Moore; J. Sooknanan; J. Holley,"Simulation and Software Lead, S.O. Engineering, Houston, TX; Lead Mechanical Designer, S.D. Engineering, Houston, TX; Simulation and Software Lead, S.O. Engineering, Houston, TX",2019 IEEE International Symposium on Measurement and Control in Robotics (ISMCR),13 Jan 2020,2019,,,B3-2-1,B3-2-7,"To help meet the growing needs of the robotics community, the Robot Operating System (ROS) is currently undergoing a major redesign in which one of its primary design goals is to prioritize support for real-time computing (ROS2). Real-time computing techniques are found in most industrial robots, and yet this capability is noticeably lacking from many of the open-source ROS robots in existence today. This knowledge gap is problematic for students using ROS and their future employers with realtime systems requiring development and maintenance. Bobble-Bot is an open-source ROS robot that was created to close this gap. The robot demonstrates the use of real-time control using ROS in a fun and engaging way. Bobble-Bot is a modern example of the classic inverted pendulum problem that is commonly covered in control theory. It is a controls problem that requires a real-time controller to maintain stability. This paper introduces Bobble-Bot and its accompanying simulator in order to demonstrate how to design a real-time system that uses the ROS and ROS2 frameworks. In addition, results from simulation and hardware tests are provided along with links to Bobble-Bot's open-source software and project documentation.",,978-1-7281-4899-1,10.1109/ISMCR47492.2019.8955713,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8955713,,Real-time systems;Robots;Kernel;Economic indicators;Open source software;Hardware,,,,14.0,IEEE,13 Jan 2020,,,IEEE,IEEE Conferences
40,Between JIRA and GitHub: ASFBot and its Influence on Human Comments in Issue Trackers,A. Moharil; D. Orlov; S. Jameel; T. Trouwen; N. Cassee; A. Serebrenik,"Eindhoven University of Technology, Eindhoven, The Netherlands; Eindhoven University of Technology, Eindhoven, The Netherlands; Eindhoven University of Technology, Eindhoven, The Netherlands; Eindhoven University of Technology, Eindhoven, The Netherlands; Eindhoven University of Technology, Eindhoven, The Netherlands; Eindhoven University of Technology, Eindhoven, The Netherlands",2022 IEEE/ACM 19th International Conference on Mining Software Repositories (MSR),21 Jun 2022,2022,,,112,116,"Open-Source Software (OSS) projects have adopted various automations for repetitive tasks in recent years. One common type of automation in OSS is bots. In this exploratory case study, we seek to understand how the adoption of one particular bot (ASFBot) by the Apache Software Foundation (ASF) impacts the discussions in the issue-trackers of these projects. We use the SmartShark dataset to investigate whether the ASFBot affects (i) human comments mentioning pull requests and fixes in issue comments and (ii) the general human comment rate on issues. We apply a regression discontinuity design (RDD) on nine ASF projects that have been active both before and after the ASFBot adoption. Our results indicate (i) an immediate decrease in the number of median comments mentioning pull requests and fixes after the bot adoption, but the trend of a monthly decrease in this comment count is reversed, and (ii) no effect in the number of human comments after the bot adoption. We make an effort to gather first insights in understanding the impact of adopting the ASFBot on the commenting behavior of developers who are working on ASF projects.",2574-3864,978-1-4503-9303-4,10.1145/3524842.3528528,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9796306,bots;ASFBot;issue-trackers;Apache,Bot (Internet);Automation;Market research;Behavioral sciences;Data mining;Task analysis;Open source software,,1.0,,30.0,CCBY,21 Jun 2022,,,IEEE,IEEE Conferences
41,How to Design a Program Repair Bot? Insights from the Repairnator Project,S. Urli; Z. Yu; L. Seinturier; M. Monperrus,"University of Lille, Inria Lille, France; University of Lille, Inria Lille, France; University of Lille, Inria Lille, France; KTH Royal Institute of Technology, Sweden",2018 IEEE/ACM 40th International Conference on Software Engineering: Software Engineering in Practice Track (ICSE-SEIP),30 Aug 2018,2018,,,95,104,"Program repair research has made tremendous progress over the last few years, and software development bots are now being invented to help developers gain productivity. In this paper, we investigate the concept of a ""program repair bot"" and present Repairnator. The Repairnator bot is an autonomous agent that constantly monitors test failures, reproduces bugs, and runs program repair tools against each reproduced bug. If a patch is found, Repairnator bot reports it to the developers. At the time of writing, Repairnator uses three different program repair systems and has been operating since February 2017. In total, it has studied 11 523 test failures over 1 609 open-source software projects hosted on GitHub, and has generated patches for 15 different bugs. Over months, we hit a number of hard technical challenges and had to make various design and engineering decisions. This gives us a unique experience in this area. In this paper, we reflect upon Repairnator in order to share this knowledge with the automatic program repair community.",,978-1-4503-5659-6,,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8449240,program repair;repair bot,Maintenance engineering;Computer bugs;Tools;Open source software;Java;Software engineering,,3.0,,35.0,,30 Aug 2018,,,IEEE,IEEE Conferences
42,Detecting and Characterizing Bots that Commit Code,T. Dey; S. Mousavi; E. Ponce; T. Fry; B. Vasilescu; A. Filippova; A. Mockus,"The University of Tennessee, Knoxville, TN, USA; The University of Tennessee, Knoxville, TN, USA; The University of Tennessee, Knoxville, TN, USA; The University of Tennessee, Knoxville, TN, USA; Carnegie Mellon University, Pittsburgh, PA, USA; Github, San Francisco, CA, USA; The University of Tennessee, Knoxville, TN, USA",2020 IEEE/ACM 17th International Conference on Mining Software Repositories (MSR),20 Jun 2023,2020,,,209,219,"Background: Some developer activity traditionally performed manually, such as making code commits, opening, managing, or closing issues is increasingly subject to automation in many OSS projects. Specifically, such activity is often performed by tools that react to events or run at specific times. We refer to such automation tools as bots and, in many software mining scenarios related to developer productivity or code quality, it is desirable to identify bots in order to separate their actions from actions of individuals. Aim: Find an automated way of identifying bots and code committed by these bots, and to characterize the types of bots based on their activity patterns. Method and Result: We propose BIMAN, a systematic approach to detect bots using author names, commit messages, files modified by the commit, and projects associated with the commits. For our test data, the value for AUC-ROC was 0.9. We also characterized these bots based on the time patterns of their code commits and the types of files modified, and found that they primarily work with documentation files and web pages, and these files are most prevalent in HTML and JavaScript ecosystems. We have compiled a shareable dataset containing detailed information about 461 bots we found (all of which have more than 1000 commits) and 13,762,430 commits they created.",2574-3864,978-1-4503-7517-7,10.1145/3379597.3387478,"NSF(grant numbers:CNS-1925615,IIS-1633437,IIS-1901102,1717415,1901311); ",https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10148716,bots;automated commits;random forest;ensemble model;social coding platforms;software engineering,Productivity;Codes;Automation;Systematics;Social networking (online);Web pages;Chatbots,,25.0,,49.0,,20 Jun 2023,,,IEEE,IEEE Conferences
43,Bringing Automation to the Classroom: A ChatOps-Based Approach,E. Mulyana; R. Hakimi; Hendrawan,"School of Electrical Engineering and Informatics, Institut Teknologi Bandung, Bandung, Indonesia; School of Electrical Engineering and Informatics, Institut Teknologi Bandung, Bandung, Indonesia; School of Electrical Engineering and Informatics, Institut Teknologi Bandung, Bandung, Indonesia",2018 4th International Conference on Wireless and Telematics (ICWT),11 Nov 2018,2018,,,1,6,In this paper we present the design and implementation of a chatbot-based virtual assistant called LTKA-Bot. Its main function is to streamline and to automate manual and administrative tasks while supporting other course-related activities. It differs from other recent approaches in that it is based on the ChatOps paradigm instead of on some AI-based schemes. LTKA-Bot introduces a case of automation and demonstrates its potentials in the area of higher education which is steadily transformed to cope with technological progresses and administrative policy dynamics including accreditation. International accreditation body such as ABET requires fulfillment of certain criteria which in turn also requires appropriate course design and quite a lot of document works. LTKA-Bot borrows the idea of automation which is very common in the modern tech companies to cope with such challenges. It facilitates more efficient course-related activities while satisfying all document requirement with minimal effort.,,978-1-5386-6163-5,10.1109/ICWT.2018.8527810,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8527810,chatops;chatbot;automation;ABET;virtual assistant;bot in education,Task analysis;Automation;Accreditation;Artificial intelligence;Planning;Personal digital assistants,,10.0,,10.0,IEEE,11 Nov 2018,,,IEEE,IEEE Conferences
44,Understanding the Time to First Response in GitHub Pull Requests,K. A. Hasan; M. Macedo; Y. Tian; B. Adams; S. Ding,"School of Computing, Queen’s University, Kingston, ON, Canada; School of Computing, Queen’s University, Kingston, ON, Canada; School of Computing, Queen’s University, Kingston, ON, Canada; School of Computing, Queen’s University, Kingston, ON, Canada; School of Computing, Queen’s University, Kingston, ON, Canada",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),12 Jul 2023,2023,,,1,11,"The pull-based development is widely adopted in modern open-source software (OSS) projects, where developers propose changes to the codebase by submitting a pull request (PR). However, due to many reasons, PRs in OSS projects frequently experience delays across their lifespan, including prolonged waiting times for the first response. Such delays may significantly impact the efficiency and productivity of the development process, as well as the retention of new contributors as long-term contributors.In this paper, we conduct an exploratory study on the time-to-first-response for PRs by analyzing 111,094 closed PRs from ten popular OSS projects on GitHub. We find that bots frequently generate the first response in a PR, and significant differences exist in the timing of bot-generated versus human-generated first responses. We then perform an empirical study to examine the characteristics of bot- and human-generated first responses, including their relationship with the PR’s lifetime. Our results suggest that the presence of bots is an important factor contributing to the time-to-first-response in the pull-based development paradigm, and hence should be separately analyzed from human responses. We also report the characteristics of PRs that are more likely to experience long waiting for the first human-generated response. Our findings have practical implications for newcomers to understand the factors contributing to delays in their PRs.",2574-3864,979-8-3503-1184-6,10.1109/MSR59073.2023.00015,Natural Sciences and Engineering Research Council of Canada; ,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10173964,pull request;first response;latency analysis;fine-grained analysis;code review,Productivity;Focusing;Chatbots;Delays;Time factors;Data mining;Open source software,,,,32.0,IEEE,12 Jul 2023,,,IEEE,IEEE Conferences
45,"Exploring Activity and Contributors on GitHub: Who, What, When, and Where",X. Xia; Z. Weng; W. Wang; S. Zhao,"Data Science and Engineering, East China Normal University, Shanghai, China; Data Science and Engineering, East China Normal University, Shanghai, China; Data Science and Engineering, East China Normal University, Shanghai, China; School of Electronic and Information Engineering, Tongji University, Shanghai, China",2022 29th Asia-Pacific Software Engineering Conference (APSEC),16 Feb 2023,2022,,,11,20,"Apart from being a code hosting platform, GitHub is the place where large-scale open collaborations and contributions happen. Every minute, thousands of developers are submitting code, having discussions of issues or pull requests, with all user behaviors recorded in the GitHub Event Stream (GES). Exploration of the activities in the GES could help understand who is active, the way they work, the time when they are active and even their location. To this end, a large-scale analysis was initially performed based on the 0.86 billion event records generated in 2020. We extracted 902K active contributors out of 14 million GitHub accounts by observing their activity distribution, then explored their behavior distribution, active time in the day and week, and estimated time zone distributions on the basis of their circadian activity rhythm. To go deeper, a case study of 79 projects in CNCF and contrast analyses of different project maturity levels were conducted. Our results showed that from a macro perspective, bots are increasingly more active and can serve numerous projects. Contributors work on weekdays, and are globally more inclined toward the daytime working hours in the Americas and Europe. The time zone distribution also reveals that UTC+2 and UTC-4 have the most active contributors. A critical discovery was the validation and quantification of a high bus factor risk exists in the OSS ecosystem. Whether from a large group point of view or within specific projects, a rather small group of OSS contributors (less than 20%) undertook the majority of the work. The GES can provide a wealth of information about open source software (OSS). Our findings provide insights into global GitHub collaboration behaviors and may be of help for researchers and practitioners to further understand modern OSS ecosystem.",2640-0715,978-1-6654-5537-4,10.1109/APSEC57359.2022.00013,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10043221,GitHub behavior data;Contributor Activity;Open Source Collaboration,Codes;Ecosystems;Collaboration;Venture capital;Germanium;Chatbots;Rhythm,,2.0,,44.0,IEEE,16 Feb 2023,,,IEEE,IEEE Conferences
46,AI-Powered Code Review Assistant for Streamlining Pull Request Merging,C. Adapa; S. S. Avulamanda; A. R. K. Anjana; A. Victor,"India Systems Development Labs, IBM India Private Limited, Bangalore, India; India Systems Development Labs, IBM India Private Limited, Bangalore, India; India Systems Development Labs, IBM India Private Limited, Bangalore, India; India Systems Development Labs, IBM India Private Limited, Bangalore, India","2024 IEEE International Conference for Women in Innovation, Technology & Entrepreneurship (ICWITE)",23 Apr 2024,2024,,,323,327,"WatsonX, a comprehensive data and AI platform, adeptly addresses contemporary challenges by meticulously training, validating, tuning, and deploying data to drive impactful business outcomes. The intricate task of timely merging Pull Requests (PRs) poses a significant challenge for software development teams, directly influencing business operations. This paper introduces an innovative solution leveraging AI, particularly harnessing generative AI techniques with the Falcon40-B model through the platform. The AI bot facilitates an initial PR review, offering insightful feedback on code formatting, best practices, and minor issues and streamlines collaboration by automatically assigning and notifying PR reviewers. The overarching goal is the continuous evolution of this AI bot into an intelligent reviewer, capable of assessing code from a functional standpoint. The implementation of this solution holds the promise of significantly enhancing PR management and expediting the entire development workflow.",,979-8-3503-8328-7,10.1109/ICWITE59797.2024.10503540,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10503540,WatsonX;Generative AI;Pull request;Falcon40B;Code review;GitHub webhooks;Intelligent bot,Training;Codes;Reviews;Merging;Chatbots;Software;Task analysis,,,,17.0,IEEE,23 Apr 2024,,,IEEE,IEEE Conferences
47,Recommending Good First Issues in GitHub OSS Projects,W. Xiao; H. He; W. Xu; X. Tan; J. Dong; M. Zhou,"Key Laboratory of High Confidence Software Technologies, Ministry of Education, School of Computer Science, Peking University, Beijing, China; Key Laboratory of High Confidence Software Technologies, Ministry of Education, School of Computer Science, Peking University, Beijing, China; School of Computer Science and Technology, Soochow University, Suzhou, China; Key Laboratory of High Confidence Software Technologies, Ministry of Education, School of Computer Science, Peking University, Beijing, China; Key Laboratory of High Confidence Software Technologies, Ministry of Education, School of Computer Science, Peking University, Beijing, China; Key Laboratory of High Confidence Software Technologies, Ministry of Education, School of Computer Science, Peking University, Beijing, China",2022 IEEE/ACM 44th International Conference on Software Engineering (ICSE),20 Jun 2022,2022,,,1830,1842,"Attracting and retaining newcomers is vital for the sustainability of an open-source software project. However, it is difficult for new-comers to locate suitable development tasks, while existing “Good First Issues” (GFI) in GitHub are often insufficient and inappropriate. In this paper, we propose RECGFI, an effective practical approach for the recommendation of good first issues to newcomers, which can be used to relieve maintainers' burden and help newcomers onboard. RECGFI models an issue with features from multiple dimensions (content, background, and dynamics) and uses an XGBoost classifier to generate its probability of being a GFI. To evaluate RECGFI, we collect 53,510 resolved issues among 100 GitHub projects and care-fully restore their historical states to build ground truth datasets. Our evaluation shows that RECGFI can achieve up to 0.853 AUC in the ground truth dataset and outperforms alternative models. Our interpretable analysis of the trained model further reveals in-teresting observations about GFI characteristics. Finally, we report latest issues (without GFI-signaling labels but recommended as GFI by our approach) to project maintainers among which 16 are confirmed as real GFIs and five have been resolved by a newcomer.",1558-1225,978-1-4503-9221-1,10.1145/3510003.3510196,National Key R&D Program of China(grant numbers:2018YFB1004201); National Natural Science Foundation of China(grant numbers:61825201); ,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9793998,open-source software;onboarding;good first issues,Bot (Internet);Analytical models;Machine learning;Task analysis;Sustainable development;Open source software;Software development management,,8.0,,67.0,CCBY,20 Jun 2022,,,IEEE,IEEE Conferences
48,JITBot: An Explainable Just-In-Time Defect Prediction Bot,C. Khanan; W. Luewichana; K. Pruktharathikoon; J. Jiarpakdee; C. Tantithamthavorn; M. Choetkiertikul; C. Ragkhitwetsagul; T. Sunetnanta,"Faculty of Information and Communication Technology (ICT), Mahidol University, Bangkok, Thailand; Faculty of Information and Communication Technology (ICT), Mahidol University, Bangkok, Thailand; Faculty of Information and Communication Technology (ICT), Mahidol University, Bangkok, Thailand; Faculty of Information Technology (FIT), Monash University, Melbourne, Australia; Faculty of Information Technology (FIT), Monash University, Melbourne, Australia; Faculty of Information and Communication Technology (ICT), Mahidol University, Bangkok, Thailand; Faculty of Information and Communication Technology (ICT), Mahidol University, Bangkok, Thailand; Faculty of Information and Communication Technology (ICT), Mahidol University, Bangkok, Thailand",2020 35th IEEE/ACM International Conference on Automated Software Engineering (ASE),24 Dec 2020,2020,,,1336,1339,"Just-In-Time (JIT) defect prediction is a classification model that is trained using historical data to predict bug-introducing changes. However, recent studies raised concerns related to the explain-ability of the predictions of many software analytics applications (i.e., practitioners do not understand why commits are risky and how to improve them). In addition, the adoption of Just-In-Time defect prediction is still limited due to a lack of integration into CI/CD pipelines and modern software development platforms (e.g., GitHub). In this paper, we present an explainable Just-In-Time defect prediction framework to automatically generate feedback to developers by providing the riskiness of each commit, explaining why such commit is risky, and suggesting risk mitigation plans. The proposed framework is integrated into the GitHub CI/CD pipeline as a GitHub application to continuously monitor and analyse a stream of commits in many GitHub repositories. Finally, we discuss the usage scenarios and their implications to practitioners. The VDO demonstration is available at https://jitbot-tool.github.io/.",2643-1572,978-1-4503-6768-4,,ARC(grant numbers:DE200100941); ,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9286007,Software Quality Assurance;Just-In-Time Defect Prediction,Pipelines;Software quality;Predictive models;Risk management;Monitoring;Software development management;Software engineering,,24.0,,11.0,,24 Dec 2020,,,IEEE,IEEE Conferences
49,Navigating Complexity in Software Engineering: A Prototype for Comparing GPT-n Solutions,C. Treude,"School of Computing and Information Systems, The University of Melbourne, Melbourne, Australia",2023 IEEE/ACM 5th International Workshop on Bots in Software Engineering (BotSE),27 Jul 2023,2023,,,1,5,"Navigating the diverse solution spaces of non-trivial software engineering tasks requires a combination of technical knowledge, problem-solving skills, and creativity. With multiple possible solutions available, each with its own set of trade-offs, it is essential for programmers to evaluate the various options and select the one that best suits the specific requirements and constraints of a project. Whether it is choosing from a range of libraries, weighing the pros and cons of different architecture and design solutions, or finding unique ways to fulfill user requirements, the ability to think creatively is crucial for making informed decisions that will result in efficient and effective software. However, the interfaces of current chatbot tools for programmers, such as OpenAI’s ChatGPT or GitHub Copilot, are optimized for presenting a single solution, even for complex queries. While other solutions can be requested, they are not displayed by default and are not intuitive to access. In this paper, we present our work-in-progress prototype “GPTCOMPARE”, which allows programmers to visually compare multiple source code solutions generated by GPT-n models for the same programming-related query by highlighting their similarities and differences.",,979-8-3503-0212-7,10.1109/BotSE59190.2023.00008,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10190325,Chatbots;diversity;complexity;solution spaces,Navigation;Source coding;Prototypes;Chatbots;Software;Libraries;Problem-solving,,6.0,,27.0,IEEE,27 Jul 2023,,,IEEE,IEEE Conferences
50,Leaky Kits: The Increased Risk of Data Exposure from Phishing Kits,B. Tejaswi; N. Samarasinghe; S. Pourali; M. Mannan; A. Youssef,"Concordia University, Montreal, Canada; Concordia University, Montreal, Canada; Concordia University, Montreal, Canada; Concordia University, Montreal, Canada; Concordia University, Montreal, Canada",2022 APWG Symposium on Electronic Crime Research (eCrime),6 Jun 2023,2022,,,1,13,"Phishing kits allow adversaries with little or no technical experience to launch phishing websites in a short time. Past research has found such phishing kits that contain backdoors (e.g., obfuscated email addresses), which are intentionally added by the kit developers to obtain the phished data. In this work, we augment on prior research by exploring several ways in which security flaws in phishing kits make the victim data accessible to a wider set of adversaries beyond the kit deployers and kit developers. We implement an automated framework for kit collection and analysis, which includes a custom command-line PHP execution tool (for dynamic analysis) along with other open-source tools. Our analysis focuses on finding backdoors (e.g., obfuscated email address, command injection), measuring the extent of disclosure of sensitive information (e.g., via exposed plaintext files, hardcoded Telegram bot tokens, hardcoded admin console passwords) and detecting security vulnerabilities in phishing kits. We analyze 4238 distinct phishing kits (from a set of 26,281 compressed files collected from several sources over a span of 15 months), each having unique SHA-1 hash value. We found that 3.9% of the analyzed kits contained at least one form of backdoor. We also found hardcoded admin console passwords and API keys used to access third party services, in 8.3% and 16% of the analyzed kits, respectively. In addition, 15.8% of the analyzed kits wrote stolen information (PII) of users in plaintext files; 5.6% kits did not restrict external access to these plaintext files, leading to exposure of sensitive phished data (e.g., 178,504 passwords, 133,248 email addresses, 1253 credit card numbers). Furthermore, 11.7% of the analyzed kits contained hardcoded Telegram bots; we obtained invite links to join Telegram chats in 0.5% kits, and found them to expose chat messages containing sensitive PII information of victims (e.g., 73,342 passwords, 141,095 email addresses, 3584 credit card numbers). We also found that 64% of the kits are affected by security vulnerabilities (e.g., insecure file operations, SQL injection), which can be abused to further expose user data. We have open-sourced our framework and other artifacts to benefit future research.",2159-1245,979-8-3503-0169-4,10.1109/eCrime57793.2022.10142092,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10142092,Phishing websites;phishing kits,Phishing;Passwords;SQL injection;Credit cards;Chatbots;Electronic mail;Security,,1.0,,50.0,IEEE,6 Jun 2023,,,IEEE,IEEE Conferences
51,Conversation Clustering Adaptation for Intent Recognition,M. Lew; A. Obuchowski; E. Kacprzak; A. Pluwak,"SentiOne, Gdańsk, Poland; Gdańsk University of Technology, Gdańsk, Poland; SentiOne, Gdańsk, Poland; SentiOne, Gdańsk, Poland",2021 20th IEEE International Conference on Machine Learning and Applications (ICMLA),25 Jan 2022,2021,,,1278,1285,"With the increasing presence of NLU tools such as automatic dialogue systems, achieving high accuracy of intent recognition in chatbots becomes an especially important problem to tackle. This issue cannot be solved without sufficient training data, but the scarcity of labelled training data often poses a major challenge to the development of real-life chatbots. Therefore, methods utilizing unlabelled data resources have been recently gaining interest. One of most notable approaches is the use of pre-trained encoders based on language models. Trained for general purposes, they benefit from further domain adjustments. In our work we offer an approach that can increase the model’s accuracy for text classification, which can serve as an alternative for standard methods of domain adaptation. Our approach consists of a combination of methods: a clustering approach, similar to intent induction; an encoder domain adaptation on a cluster classification task, similar to intent recognition using unlabelled data; and model fine-tuning on labelled datasets. In this approach unlabelled data becomes complementary to labelled data, reducing the time needed for corpus building. We evaluate our approach on: 1) the public WebApp dataset and 2) a demanding real-life banking domain dataset, achieving 0.97 and 0.93 accuracy respectively. This approach, called Conversation Clustering Adaptation (CCA), when applied to an encoder, increases the accuracy of intent recognition up by to 12.4pp and exceeds current state-of-the-art methods while benefiting from the use of additional training data. We share our code at https://github.com/michal-lew/cca.",,978-1-6654-4337-1,10.1109/ICMLA52953.2021.00208,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9680255,natural language processing;domain adaptation;fine-tuning;knowledge-transfer;chat-bots,Adaptation models;Conferences;Transfer learning;Text categorization;Natural languages;Training data;Chatbots,,,,29.0,IEEE,25 Jan 2022,,,IEEE,IEEE Conferences
52,A Blockchain-Based Ticket Sales Platform,P. Sombat; P. Ratanaworachan,"Department of Computer Engineering, Faculty of Engineering, Kasetsart University, Bangkok, Thailand; Department of Computer Engineering, Faculty of Engineering, Kasetsart University, Bangkok, Thailand",2023 27th International Computer Science and Engineering Conference (ICSEC),4 Dec 2023,2023,,,226,230,"Concerts or fan meetings usually attract lots of attention, generating huge demand for tickets for these events. But, existing ticket purchase systems are unable to efficiently and transparently accommodate this. We often hear scandals of bot-controlled clients gobbling up tickets within seconds after sales open or celebrities acquiring prime tickets exceeding individual quota. These problems arise because existing systems are centralized. This can be a single point of failure and the controlling authority can ban or give privileges to certain users. This work sets out to remedy these problems using a blockchain-base solution that, by nature, is highly decentralized. We have created and deployed EVM (Ethereum Virtual Machine)-based smart contracts for ticket sales platform on two EVM-compatible blockchains, Ethereum (ETH) and Avalanche (AVAX). These contracts inherit heavily from the ERC-721 standard for NFT (Non-Fungible Token). The platforms on both blockchains engender the desirable transparency. However, the platform on Avalanche is much more efficient and economical to deploy and utilize. We have open-sourced the code for our platform on Github. Visit the following link to fork or check it out: https://github.com/JesperBerben/TicketNFT In addition, you can now interact with our platform on Avalanche which has been deployed and verified at the address linked to below: https://snowtrace.io/address/0x17fd3f6cf6cbff75604b63f1ca12c6db29730a9c",2768-0592,979-8-3503-4210-9,10.1109/ICSEC59635.2023.10329682,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10329682,Ticket sales platforms;Non-fungible tokens (NFTs);Avalanche blockchain;Ethereum blockchain,Computer science;Fans;Codes;Smart contracts;Standards organizations;Organizations;Censorship,,,,12.0,IEEE,4 Dec 2023,,,IEEE,IEEE Conferences
53,Explaining Differences in Classes of Discrete Sequences,S. Saadat; G. Sukthankar,"Department of Computer Science, University of Central Florida, Orlando, FL, US; Department of Computer Science, University of Central Florida, Orlando, FL, US",2020 IEEE/WIC/ACM International Joint Conference on Web Intelligence and Intelligent Agent Technology (WI-IAT),24 Jun 2021,2020,,,129,136,"While there are many machine learning methods to classify and cluster sequences, they fail to explain what are the differences in groups of sequences that make them distinguishable. Although in some cases having a black box model is sufficient, there is a need for increased explainability in research areas focused on human behaviors. For example, psychologists are less interested in having a model that predicts human behavior with high accuracy and more concerned with identifying differences between actions that lead to divergent human behavior. This paper presents techniques for understanding differences between classes of discrete sequences. Approaches introduced in this paper can be utilized to interpret black box machine learning models on sequences. The first approach compares k-gram representations of sequences using the silhouette score. The second method characterizes differences by analyzing the distance matrix of subsequences. As a case study, we trained black box supervised learning methods to classify sequences of GitHub teams and then utilized our sequence analysis techniques to measure and characterize differences between event sequences of teams with bots and teams without bots. In our second case study, we classified Minecraft event sequences to infer their high-level actions and analyzed differences between low-level event sequences of actions.",,978-1-6654-1924-6,10.1109/WIIAT50758.2020.00022,Defense Advanced Research Projects Agency; ,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9457746,supervised learning;discrete sequence mining;explainable AI,Sequences;Supervised learning;Psychology;Machine learning;Predictive models;Observers;Teamwork,,2.0,,27.0,IEEE,24 Jun 2021,,,IEEE,IEEE Conferences
54,Improved text language identification for the South African languages,B. Duvenhage; M. Ntini; P. Ramonyai,"Praekelt Consulting, Feersum Engine, Johannesburg, South Africa; Engineering Team, Praekelt Consulting, Johannesburg, South Africa; Engineering Team, Praekelt Consulting, Johannesburg, South Africa",2017 Pattern Recognition Association of South Africa and Robotics and Mechatronics (PRASA-RobMech),18 Jan 2018,2017,,,214,218,"Virtual assistants and text chatbots have recently been gaining popularity. Given the short message nature of text-based chat interactions, the language identification systems of these bots might only have 15 or 20 characters to make a prediction. However, accurate text language identification is important, especially in the early stages of many multilingual natural language processing pipelines. This paper investigates the use of a naive Bayes classifier, to accurately predict the language family that a piece of text belongs to, combined with a lexicon based classifier to distinguish the specific South African language that the text is written in. This approach leads to a 31% reduction in the language detection error. In the spirit of reproducible research the training and testing datasets as well as the code are published on github. Hopefully it will be useful to create a text language identification shared task for South African languages.",,978-1-5386-2314-5,10.1109/RoboMech.2017.8261150,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8261150,Naive Bayesian text classification;lexicon based text classification;text language identification,Training;Google;Natural language processing;Testing;Support vector machines;Pipelines,,5.0,,12.0,IEEE,18 Jan 2018,,,IEEE,IEEE Conferences
55,Dish-ID: A neural-based method for ingredient extraction and further recipe suggestion,I. Shchuka; S. Miftakhov; V. Patrushev; M. Tikhonova; A. Fenogenova,"MPEI (Moscow Power Engineering Institute), Moscow, Russia; New Economic School (NES), Moscow, Russia; NSU (Novosibirsk State University), Novosibirsk, Russia; National Research University Higher School of Economics, Sberbank, Moscow, Russia; Sberbank, Moscow, Russia",2020 International Conference Engineering and Telecommunication (En&T),24 May 2021,2020,,,1,5,"The paper presents a method for meal recognition, ingredient extraction and recipe suggestion in the Russian language. The proposed algorithm consists of several consecutive stages. On the first stage the model extracts a list of ingredients from a photo of the dish, based on which recipes on the second stage are selected. Two ingredient extraction architectures were tested for the first stage and three recipe matching methods for recipe suggestion are proposed. In addition, the algorithm was incorporated into the telegram-bot which provides friendly user experience. Source code is at https://github.com/Alenushldish_id_sirius.",,978-1-7281-8829-4,10.1109/EnT50437.2020.9431242,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9431242,machine learning;natural language processing;computer vision;deep learning;neural networks;food recognition;food detection;image capturing;ingredient extraction,Adaptation models;Machine learning algorithms;Pipelines;Europe;User experience;Task analysis,,1.0,,14.0,IEEE,24 May 2021,,,IEEE,IEEE Conferences
56,Toward an Empirical Theory of Feedback-Driven Development,M. Beller,,2018 IEEE/ACM 40th International Conference on Software Engineering: Companion (ICSE-Companion),30 Aug 2018,2018,,,503,505,"Software developers today crave for feedback, be it from their peers or even bots in the form of code review, static analysis tools like their compiler, or the local or remote execution of their tests in the Continuous Integration (CI) environment. With the advent of social coding sites like GitHub and tight integration of CI services like Travis CI, software development practices have fundamentally changed. Despite a highly changed software engineering landscape, however, we still lack a suitable description of an individual's contemporary software development practices, that is how an individual code contribution comes to be. Existing descriptions like the v-model are either too coarse-grained to describe an individual contributor's workflow, or only regard a sub-part of the development process like Test-Driven Development. In addition, most existing models are prerather than de-scriptive. By contrast, in our thesis, we perform a series of empirical studies to describe the individual constituents of Feedback-Driven Development (FDD) and then compile the evidence into an initial theory on how modern software development works. Our thesis culminates in the finding that feedback loops are the characterizing criterion of contemporary software development. Our model is flexible enough to accommodate a broad bandwidth of contemporary workflows, despite large variances in how projects use and configure parts of FDD.",2574-1934,978-1-4503-5663-3,,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8449638,Feedback-Driven Development (FDD),Software;Testing;Software engineering;Static analysis;Tools;Quality assurance;Debugging,,,,,,30 Aug 2018,,,IEEE,IEEE Conferences
57,Multi-Domain Learning and Identity Mining for Vehicle Re-Identification,S. He; H. Luo; W. Chen; M. Zhang; Y. Zhang; F. Wang; H. Li; W. Jiang,Zhejiang University; Zhejiang University; Alibaba Group; Zhejiang University; Alibaba Group; Alibaba Group; Alibaba Group; Zhejiang University,2020 IEEE/CVF Conference on Computer Vision and Pattern Recognition Workshops (CVPRW),28 Jul 2020,2020,,,2485,2493,"This paper introduces our solution for the Track2 in AI City Challenge 2020 (AICITY20). The Track2 is a vehicle re-identification (ReID) task with both the real-world data and synthetic data.Our solution is based on a strong baseline with bag of tricks (BoT-BS) proposed in person ReID. At first, we propose a multi-domain learning method to joint the real-world and synthetic data to train the model. Then, we propose the Identity Mining method to automatically generate pseudo labels for a part of the testing data, which is better than the k-means clustering. The tracklet-level re-ranking strategy with weighted features is also used to post-process the results. Finally, with multiple-model ensemble, our method achieves 0.7322 in the mAP score which yields third place in the competition. The codes are available at https://github.com/heshuting555/AICITY2020_DMT_VehicleReID.",2160-7516,978-1-7281-9360-1,10.1109/CVPRW50498.2020.00299,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9150926,,Data models;Task analysis;Testing;Feature extraction;Urban areas;Data mining;Computer vision,,41.0,,32.0,IEEE,28 Jul 2020,,,IEEE,IEEE Conferences
58,On the Use of Dependabot Security Pull Requests,M. Alfadel; D. E. Costa; E. Shihab; M. Mkhallalati,"Data-driven Analysis of Software (DAS) Lab, Concordia University, Montreal, Canada; Data-driven Analysis of Software (DAS) Lab, Concordia University, Montreal, Canada; Data-driven Analysis of Software (DAS) Lab, Concordia University, Montreal, Canada; Data-driven Analysis of Software (DAS) Lab, Concordia University, Montreal, Canada",2021 IEEE/ACM 18th International Conference on Mining Software Repositories (MSR),28 Jun 2021,2021,,,254,265,"Vulnerable dependencies are a major problem in modern software development. As software projects depend on multiple external dependencies, developers struggle to constantly track and check for corresponding security vulnerabilities that affect their project dependencies. To help mitigate this issue, Dependabot has been created, a bot that issues pull-requests to automatically update vulnerable dependencies. However, little is known about the degree to which developers adopt Dependabot to help them update vulnerable dependencies.In this paper, we investigate 2,904 JavaScript open-source GitHub projects that subscribed to Dependabot. Our results show that the vast majority (65.42%) of the created security-related pull-requests are accepted, often merged within a day. Through manual analysis, we identify 7 main reasons for Dependabot security pull-requests not being merged, mostly related to concurrent modifications of the affected dependencies rather than Dependabot failures. Interestingly, only 3.2% of the manually examined pull-requests suffered from build breakages. Finally, we model the time it takes to merge a Dependabot security pull-request using characteristics from projects, the fixed vulnerabilities and issued pull requests. Our model reveals 5 significant features to explain merge times, e.g., projects with relevant experience with Dependabot security pull-requests are most likely associated with rapid merges. Surprisingly, the severity of the dependency vulnerability and the potential risk of breaking changes are not strongly associated with the merge time. To the best of our knowledge, this study is the first to evaluate how developers receive Dependabot’s security contributions. Our findings indicate that Dependabot provides an effective platform for increasing awareness of dependency vulnerabilities and helps developers mitigate vulnerability threats in JavaScript projects.",2574-3864,978-1-7281-8710-5,10.1109/MSR52588.2021.00037,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9463148,Dependabot;pull request;dependency;security vulnerability,Manuals;Security;Data mining;Open source software;Software development management,,19.0,,74.0,IEEE,28 Jun 2021,,,IEEE,IEEE Conferences
59,"Mitigating Turnover with Code Review Recommendation: Balancing Expertise, Workload, and Knowledge Distribution",E. Mirsaeedi; P. C. Rigby,"Department of Computer Science and Software Engineering, Concordia University, Montréal, Québec, Canada; Department of Computer Science and Software Engineering, Concordia University, Montréal, Québec, Canada",2020 IEEE/ACM 42nd International Conference on Software Engineering (ICSE),21 Dec 2020,2020,,,1183,1195,"Developer turnover is inevitable on software projects and leads to knowledge loss, a reduction in productivity, and an increase in defects. Mitigation strategies to deal with turnover tend to disrupt and increase workloads for developers. In this work, we suggest that through code review recommendation we can distribute knowledge and mitigate turnover with minimal impact on the development process. We evaluate review recommenders in the context of ensuring expertise during review, Expertise, reducing the review workload of the core team, CoreWorkload, and reducing the Files at Risk to turnover, FaR. We find that prior work that assigns reviewers based on file ownership concentrates knowledge on a small group of core developers increasing risk of knowledge loss from turnover by up to 65%. We propose learning and retention aware review recommenders that when combined are effective at reducing the risk of turnover by -29% but they unacceptably reduce the overall expertise during reviews by -26%. We develop the Sofia recommender that suggests experts when none of the files under review are hoarded by developers, but distributes knowledge when files are at risk. In this way, we are able to simultaneously increase expertise during review with a ΔExpertise of 6%, with a negligible impact on workload of ΔCoreWorkload of 0.09%, and reduce the files at risk by ΔFaR -28%. Sofia is integrated into GitHub pull requests allowing developers to select an appropriate expert or “learner” based on the context of the review. We release the Sofia bot as well as the code and data for replication purposes.",1558-1225,978-1-4503-7121-6,10.1145/3377811.3380335,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9284120,Turnover;Knowledge Distribution;Code Review;Recommenders;Tool Support,Productivity;Knowledge engineering;Software;Software engineering;Software development management,,18.0,,56.0,,21 Dec 2020,,,IEEE,IEEE Conferences
60,Robust Text CAPTCHAs Using Adversarial Examples,R. Shao; Z. Shi; J. Yi; P. -Y. Chen; C. -J. Hsieh,"Machine Learning Department, Carnegie Mellon University, Pittsburgh, United States; Computer Science Department, University of California, Los Angeles, Los Angeles, United States; JD AI Research, Jd.Com, Inc., Shanghai, China; IBM Research, IBM, New York, United States; Computer Science Department, University of California, Los Angeles, Los Angeles, United States",2022 IEEE International Conference on Big Data (Big Data),26 Jan 2023,2022,,,1495,1504,"CAPTCHA (Completely Automated Public Turing test to tell Computers and Humans Apart) is a widely used technology to distinguish real users and automated users such as bots. However, the advance of AI technologies weakens many CAPTCHA tests and can induce security concerns. In this paper, we propose a user-friendly text-based CAPTCHA generation method named Robust Text CAPTCHA (RTC). At the first stage, the foregrounds and backgrounds are constructed with font and background images respectively sampled from font and image libraries, and they are then synthesized into identifiable pseudo adversarial CAPTCHAs. At the second stage, we utilize a highly transferable adversarial attack designed for text CAPTCHAs to better obstruct CAPTCHA solvers. Our experiments cover comprehensive models including shallow models such as KNN, SVM and random forest, as well as various deep neural networks and OCR models. Experiments show that our CAPTCHAs have a failure rate lower than one millionth in general and high usability. They are also robust against various defensive techniques that attackers may employ, including adversarially trained CAPTCHA solvers and solvers trained with collected RTCs using manual annotation. Codes available at https://github.com/RulinShao/RTC.",,978-1-6654-8045-1,10.1109/BigData55660.2022.10021100,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10021100,CAPTCHAs;adversarial example applications;security,Training;Deep learning;Support vector machines;Ultraviolet sources;Optical character recognition;Neural networks;Manuals,,4.0,,35.0,IEEE,26 Jan 2023,,,IEEE,IEEE Conferences
61,BreakBot: Analyzing the Impact of Breaking Changes to Assist Library Evolution,L. Ochoa; T. Degueule; J. -R. Falleri,"Eindhoven University of Technology; Univ. Bordeaux, Bordeaux INP, CNRS, LaBRI, UMR5800, Talence, France; Univ. Bordeaux, Bordeaux INP, CNRS, LaBRI, UMR5800, Institut Universitaire de France, Talence, France",2022 IEEE/ACM 44th International Conference on Software Engineering: New Ideas and Emerging Results (ICSE-NIER),13 Jun 2022,2022,,,26,30,"“If we make this change to our code, how will it impact our clients?” It is difficult for library maintainers to answer this simple—yet essential!—question when evolving their libraries. Library maintainers are constantly balancing between two opposing positions: make changes at the risk of breaking some of their clients, or avoid changes and maintain compatibility at the cost of immobility and growing technical debt. We argue that the lack of objective usage data and tool support leaves maintainers with their own subjective perception of their community to make these decisions.We introduce BreakBot, a bot that analyses the pull requests of Java libraries on GitHub to identify the breaking changes they introduce and their impact on client projects. Through static analysis of libraries and clients, it extracts and summarizes objective data that enrich the code review process by providing maintainers with the appropriate information to decide whether—and how—changes should be accepted, directly in the pull requests.",,978-1-6654-9596-7,10.1145/3510455.3512783,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9793524,software libraries;software evolution;breaking changes;breakbot,Java;Codes;Costs;Static analysis;Chatbots;Libraries;Object recognition;Data mining;Software engineering;Software development management,,2.0,,32.0,IEEE,13 Jun 2022,,,IEEE,IEEE Conferences
62,"GeeSolver: A Generic, Efficient, and Effortless Solver with Self-Supervised Learning for Breaking Text Captchas",R. Zhao; X. Deng; Y. Wang; Z. Yan; Z. Han; L. Chen; Z. Xue; Y. Wang,"Shanghai Jiao Tong University; Shanghai Jiao Tong University; QI-ANXIN; Shanghai Jiao Tong University; QI-AN Pangu (Shanghai) InfoTech Co., Ltd.; Shanghai Jiao Tong University; Shanghai Jiao Tong University; Shanghai Jiao Tong University",2023 IEEE Symposium on Security and Privacy (SP),21 Jul 2023,2023,,,1649,1666,"Although text-based captcha, which is used to differentiate between human users and bots, has faced many attack methods, it remains a widely used security mechanism and is employed by some websites. Some deep learning-based text captcha solvers have shown excellent results, but the labor-intensive and time-consuming labeling process severely limits their viability. Previous works attempted to create easy-to-use solvers using a limited collection of labeled data. However, they are hampered by inefficient preprocessing procedures and inability to recognize the captchas with complicated security features.In this paper, we propose GeeSolver, a generic, efficient, and effortless solver for breaking text-based captchas based on self-supervised learning. Our insight is that numerous difficult-to-attack captcha schemes that ""damage"" the standard font of characters are similar to image masks. And we could leverage masked autoencoders (MAE) to improve the captcha solver to learn the latent representation from the ""unmasked"" part of the captcha images. Specifically, our model consists of a ViT encoder as latent representation extractor and a well-designed decoder for captcha recognition. We apply MAE paradigm to train our encoder, which enables the encoder to extract latent representation from local information (i.e., without masking part) that can infer the corresponding character. Further, we freeze the parameters of the encoder and leverage a few labeled captchas and many unlabeled captchas to train our captcha decoder with semi-supervised learning.Our experiments with real-world captcha schemes demonstrate that GeeSolver outperforms the state-of-the-art methods by a large margin using a few labeled captchas. We also show that GeeSolver is highly efficient as it can solve a captcha within 25 ms using a desktop CPU and 9 ms using a desktop GPU. Besides, thanks to latent representation extraction, we successfully break the hard-to-attack captcha schemes, proving the generality of our solver. We hope that our work will help security experts to revisit the design and availability of text-based captchas. The code is available at https://github.com/NSSL-SJTU/GeeSolver.",2375-1207,978-1-6654-9336-9,10.1109/SP46215.2023.10179379,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10179379,Text-based-captchas;deep-learning;self-supervised-learning;masked-autoencoders,Privacy;Self-supervised learning;Feature extraction;Real-time systems;Decoding;Security;Data mining,,2.0,,44.0,IEEE,21 Jul 2023,,,IEEE,IEEE Conferences
63,Running a Red Light: An Investigation into Why Software Engineers (Occasionally) Ignore Coverage Checks,A. Sterk; M. Wessel; E. Hooten; A. Zaidman,"Delft University of Technology, The Netherlands; Radboud University, The Netherlands; Sentry.io, United States of America; Delft University of Technology, The Netherlands",2024 IEEE/ACM International Conference on Automation of Software Test (AST),18 Jun 2024,2024,,,12,22,"Many modern code coverage tools track and report code coverage data generated from running tests during continuous integration. They report code coverage data through a variety of channels, including email, Slack, Mattermost, or through the web interface of social coding platforms such as GitHub. In fact, this ensemble of tools can be configured in such a way that the software engineer gets a failing status check when code coverage drops below a certain threshold. In this study, we broadly investigate the opinions and experience with code coverage tools through a survey among 279 software engineers whose projects use the Codecov coverage tool and bot. In particular, we are investigating why software engineers would ignore a failing status check caused by drop in code coverage. We observe that >80% of software engineers – at least sometimes – ignore these failing status checks, and we get insights into the main reasons why software engineers ignore these checks.",2833-9061,979-8-4007-0588-5,,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10556404,software testing;code coverage;coverage checks,Surveys;Codes;Automation;Chatbots;Software;Encoding;Software development management,,,,47.0,,18 Jun 2024,,,IEEE,IEEE Conferences
64,Automatic Commit Message Generation: A Critical Review and Directions for Future Work,Y. Zhang; Z. Qiu; K. -J. Stol; W. Zhu; J. Zhu; Y. Tian; H. Liu,"School of Computer Science and Technology, Beijing Institute of Technology, Beijing, China; School of Computer Science and Technology, Beijing Institute of Technology, Beijing, China; Lero, the Science Foundation Ireland Research Centre for Software and the School of Computer Science and IT, University College Cork, Cork, Ireland; School of Computer Science and Technology, Beijing Institute of Technology, Beijing, China; Institute of Software, Chinese Academy of Sciences, and University of Chinese Academy of Sciences, Beijing, China; Tmall Technology Co., Zhejiang, China; School of Computer Science and Technology, Beijing Institute of Technology, Beijing, China",IEEE Transactions on Software Engineering,17 Apr 2024,2024,50.0,4.0,816,835,"Commit messages are critical for code comprehension and software maintenance. Writing a high-quality message requires skill and effort. To support developers and reduce their effort on this task, several approaches have been proposed to automatically generate commit messages. Despite the promising performance reported, we have identified three significant and prevalent threats in these automated approaches: 1) the datasets used to train and evaluate these approaches contain a considerable amount of ‘noise’; 2) current approaches only consider commits of a limited diff size; and 3) current approaches can only generate the subject of a commit message, not the message body. The first limitation may let the models ‘learn’ inappropriate messages in the training stage, and also lead to inflated performance results in their evaluation. The other two threats can considerably weaken the practical usability of these approaches. Further, with the rapid emergence of large language models (LLMs) that show superior performance in many software engineering tasks, it is worth asking: can LLMs address the challenge of long diffs and whole message generation? This article first reports the results of an empirical study to assess the impact of these three threats on the performance of the state-of-the-art auto generators of commit messages. We collected commit data of the Top 1,000 most-starred Java projects in GitHub and systematically removed noisy commits with bot-submitted and meaningless messages. We then compared the performance of four approaches representative of the state-of-the-art before and after the removal of noisy messages, or with different lengths of commit diffs. We also conducted a qualitative survey with developers to investigate their perspectives on simply generating message subjects. Finally, we evaluate the performance of two representative LLMs, namely UniXcoder and ChatGPT, in generating more practical commit messages. The results demonstrate that generating commit messages is of great practical value, considerable work is needed to mature the current state-of-the-art, and LLMs can be an avenue worth trying to address the current limitations. Our analyses provide insights for future work to achieve better performance in practice.",1939-3520,,10.1109/TSE.2024.3364675,"National Natural Science Foundation of China(grant numbers:62141209,62202048,62232003); Science Foundation Ireland(grant numbers:13/RC/2094-P2); ",https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10433002,Commit-based software development;open collaboration;commit message generation;benchmark,Codes;Chatbots;Task analysis;Noise measurement;Machine translation;Information retrieval;Software maintenance,,,,79.0,CCBYNCND,12 Feb 2024,,,IEEE,IEEE Journals
65,A Crowdsourcing Data Annotation System For Vietnamese Scene Text Detection,B. -V. Nguyen-Thi; T. L. Phan; T. N. Nguyen; T. D. Ngo,"University Of Science, VNU-HCM, Vietnam; University Of Science, VNU-HCM, Vietnam; University of Information Technology, VNU-HCM, Vietnam; University of Information Technology, VNU-HCM, Vietnam",2022 International Conference on Multimedia Analysis and Pattern Recognition (MAPR),25 Oct 2022,2022,,,1,6,"Most of the recent breakthroughs in AI-related research and applications are data driven. Annotated data plays the main role in improving AI/ML-based solutions. The lack of high-quality annotated data is one of the main obstacles to AI adoption, especially in Vietnamese scene text detection. Additionally, manual annotation is expensive yet not scalable. This project aims to tackle the problem by developing a crowdsourcing data annotation system at word-level annotations, vCaptcha, in the form of an anti-bot widget to integrate to some web pages. After that, results can be derived from the workers prior to evaluating and aggregating the crowdsourced labels. Also, we propose a novel human-in-the-loop approach for incorporating the state-of-the-art scene-text detection models and crowdsourcing system so that in the end, a fully annotated dataset with optimal and high quality can be generated with significant cost and time savings. Usage document to integrate vCaptcha to any web pages is available at https://bichvan2810.github.io/vCaptcha-end-user-info.",2770-6850,978-1-6654-7410-8,10.1109/MAPR56351.2022.9924980,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9924980,crowdsource;Vietnamese dataset;scene text detection;data annotation,Crowdsourcing;Costs;Annotations;Text recognition;Multimedia systems;Web pages;Detectors,,,,21.0,IEEE,25 Oct 2022,,,IEEE,IEEE Conferences
66,"Factoring Expertise, Workload, and Turnover Into Code Review Recommendation",F. Hajari; S. Malmir; E. Mirsaeedi; P. C. Rigby,"Department of Computer Science and Software Engineering, Concordia University, Montréal, QC, Canada; Department of Computer Science and Software Engineering, Concordia University, Montréal, QC, Canada; Department of Computer Science and Software Engineering, Concordia University, Montréal, QC, Canada; Department of Computer Science and Software Engineering, Concordia University, Montréal, QC, Canada",IEEE Transactions on Software Engineering,17 Apr 2024,2024,50.0,4.0,884,899,"Developer turnover is inevitable on software projects and leads to knowledge loss, a reduction in productivity, and an increase in defects. Mitigation strategies to deal with turnover tend to disrupt and increase workloads for developers. In this work, we suggest that through code review recommendation we can distribute knowledge and mitigate turnover while more evenly distributing review workload. We conduct historical analyses to understand the natural concentration of review workload and the degree of knowledge spreading that is inherent in code review. Even though review workload is highly concentrated, we show that code review natural spreads knowledge thereby reducing the files at risk to turnover. Using simulation, we evaluate existing code review recommenders and develop novel recommenders to understand their impact on the level of expertise during review, the workload of reviewers, and the files at risk to turnover. Our simulations use seeded random replacement of reviewers to allow us to compare the reviewer recommenders without the confounding variation of different reviewers being replaced for each recommender. We find that prior work that assigns reviewers based on file ownership concentrates knowledge on a small group of core developers increasing the risk of knowledge loss from turnover. Recent work, WhoDo, that considers developer workload, assigns developers that are not sufficiently committed to the project and we see an increase in files at risk to turnover. We propose learning and retention aware review recommenders that when combined are effective at reducing the risk of turnover, but they unacceptably reduce the overall expertise during reviews. Combining recommenders, we develop the SofiaWL recommender that suggests experts with low active review workload when none of the files under review are known by only one developer. In contrast, when knowledge is concentrated on one developer, it sends the review to other reviewers to spread knowledge. For the projects we study, we are able to globally increase expertise during reviews, $+3$+3%, reduce workload concentration, $-12$−12%, and reduce the files at risk, $-28$−28%. We make our scripts and data available in our replication package [1]. Developers can optimize for a particular outcome measure based on the needs of their project, or use our GitHub bot to automatically balance the outcomes [2].",1939-3520,,10.1109/TSE.2024.3366753,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10444097,Code review;recommenders;expertise;workload;turnover;code ownership;knowledge distribution,Reviews;Codes;Software engineering;Software;Task analysis;Productivity;Birds,,,,68.0,IEEE,23 Feb 2024,,,IEEE,IEEE Journals
67,Multimodal Recommendation of Messenger Channels,E. Koshchenko; E. Klimov; V. Kovalenko,"JetBrains Research, Amsterdam, The Netherlands; JetBrains Research, Saint Petersburg, Russia; JetBrains Research, Amsterdam, The Netherlands",2022 IEEE/ACM 19th International Conference on Mining Software Repositories (MSR),21 Jun 2022,2022,,,495,505,"Collaboration platforms, such as GitHub and Slack, are a vital instrument in the day-to-day routine of software engineering teams. The data stored in these platforms has a significant value for datadriven methods that assist with decision-making and help improve software quality. However, the distribution of this data across different platforms leads to the fact that combining it is a very time-consuming process. Most existing algorithms for socio-technical assistance, such as recommendation systems, are based only on data directly related to the purpose of the algorithms, often originating from a single system. In this work, we explore the capabilities of a multimodal recommendation system in the context of software engineering. Using records of interaction between employees in a software company in messenger channels and repositories, as well as the organizational structure, we build several channel recommendation models for a software engineering collaboration platform, and compare them on historical data. In addition, we implement a channel recommendation bot and assess the quality of recommendations from the best models with a user study. We find that the multimodal recommender yields better recommendations than unimodal baselines, allows to mitigate the overfitting problem, and helps to deal with cold start. Our findings suggest that the multimodal approach is promising for other recommendation problems in software engineering.",2574-3864,978-1-4503-9303-4,10.1145/3524842.3528441,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9796325,,Instruments;Software algorithms;Decision making;Collaboration;Software quality;Data models;Data mining,,,,45.0,,21 Jun 2022,,,IEEE,IEEE Conferences
68,Should I Stale or Should I Close? An Analysis of a Bot That Closes Abandoned Issues and Pull Requests,M. Wessel; I. Steinmacher; I. Wiese; M. A. Gerosa,"University of Sao Paulo, Sao Paulo, SP, Brazil; Northern Arizona University, Flagstaff, AZ, USA; Fed. Univ. of Technology, Parana, Campo Mourao, PR, Brazil; Northern Arizona University, Flagstaff, AZ, USA",2019 IEEE/ACM 1st International Workshop on Bots in Software Engineering (BotSE),5 Sep 2019,2019,,,38,42,"On GitHub, projects use bots to automate predefined and repetitive tasks related to issues and pull requests. Our research investigates the adoption of the stale bot, which helps maintainers triaging abandoned issues and pull requests. We analyzed the bots' configuration settings and their modifications over time. These settings define the time for tagging issues and pull request as stale and closing them. We collected data from 765 OSS projects hosted on GitHub. Our results indicate that most of the studied projects made no more than three modifications in the configurations file, issues tagged as bug reports are exempt from being considered stale, while the same occurs with pull requests that need some input to be processed.",,978-1-7281-2262-5,10.1109/BotSE.2019.00018,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8823598,"bots, open source software, abandoned issues",Computer bugs;Bot (Internet);Task analysis;Open source software;Labeling;Tagging;Indexes,,21.0,,20.0,IEEE,5 Sep 2019,,,IEEE,IEEE Conferences
69,Optimizing Workflow for Elite Developers: Perspectives on Leveraging SE Bots,Z. Wang; Y. Wang; D. Redmiles,"University of California, Irvine, USA; Beijing University of Posts and Telecommunications, China; University of California, Irvine, USA",2023 IEEE/ACM 5th International Workshop on Bots in Software Engineering (BotSE),27 Jul 2023,2023,,,23,27,"Small-scale automation services in Software Engineering, known as SE Bots, have gradually infiltrated every aspect of daily software development with the goal of enhancing productivity and well-being. While leading the OSS development, elite developers have often burned out from holistic responsibilities in projects and looked for automation support. Building on prior research in BotSE and our interviews with elite developers, this paper discusses how to design and implement SE bots that integrate into the workflows of elite developers and meet their expectations. We present six main design guidelines for implementing SE bots for elite developers, based on their concerns about noise, security, simplicity, and other factors. Additionally, we discuss the future directions of SE bots, especially in supporting elite developers’ increasing workload due to rising demands.",,979-8-3503-0212-7,10.1109/BotSE59190.2023.00013,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10190405,Software Engineering;SE Bots;OSS;Elite Developers,Productivity;Automation;Design methodology;Conferences;Buildings;Chatbots;Software,,1.0,,21.0,IEEE,27 Jul 2023,,,IEEE,IEEE Conferences
70,Effects of Adopting Code Review Bots on Pull Requests to OSS Projects,M. Wessel; A. Serebrenik; I. Wiese; I. Steinmacher; M. A. Gerosa,"University of São Paulo, Brazil; Eindhoven University of Technology, The Netherlands; Universidade Tecnológica Federal do Paraná, Campo Mourão, Brazil; Universidade Tecnológica Federal do Paraná, Campo Mourão, Brazil; Northern Arizona University, USA",2020 IEEE International Conference on Software Maintenance and Evolution (ICSME),2 Nov 2020,2020,,,1,11,"Software bots, which are widely adopted by Open Source Software (OSS) projects, support developers on several activities, including code review. However, as with any new technology adoption, bots may impact group dynamics. Since understanding and anticipating such effects is important for planning and management, we investigate how several activity indicators change after the adoption of a code review bot. We employed a regression discontinuity design on 1,194 software projects from GitHub. Our results indicate that the adoption of code review bots increases the number of monthly merged pull requests, decreases monthly non-merged pull requests, and decreases communication among developers. Practitioners and maintainers may leverage our results to understand, or even predict, bot effects on their projects' social interactions.",2576-3148,978-1-7281-5619-4,10.1109/ICSME46990.2020.00011,Coordenação de Aperfeiçoamento de Pessoal de Nível Superior; National Science Foundation; ,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9240622,Software Bots;GitHub Bots;Code Review;Open Source Software;Software Engineering,Bot (Internet);Software maintenance;Encoding;Data models;Planning;Open source software;Software development management,,31.0,,41.0,IEEE,2 Nov 2020,,,IEEE,IEEE Conferences
71,"Bots for Pull Requests: The Good, the Bad, and the Promising",M. Wessel; A. Abdellatif; I. Wiese; T. Conte; E. Shihab; M. A. Gerosa; I. Steinmacher,"Delft University of Technology, Netherlands; Concordia University, Canada; Universidade Tecnologica Federal do Parana, Brazil; Federal University of Amazonas, Brazil; Concordia University, Canada; Northern Arizona University, USA; Universidade Tecnologica Federal do Parana, Brazil",2022 IEEE/ACM 44th International Conference on Software Engineering (ICSE),20 Jun 2022,2022,,,274,286,"Software bots automate tasks within Open Source Software (OSS) projects' pull requests and save reviewing time and effort (“the good”). However, their interactions can be disruptive and noisy and lead to information overload (“the bad”). To identify strategies to overcome such problems, we applied Design Fiction as a participatory method with 32 practitioners. We elicited 22 design strategies for a bot mediator or the pull request user interface (“the promising”). Participants envisioned a separate place in the pull request interface for bot interactions and a bot mediator that can summarize and customize other bots' actions to mitigate noise. We also collected participants' perceptions about a prototype implementing the envisioned strategies. Our design strategies can guide the development of future bots and social coding platforms.",1558-1225,978-1-4503-9221-1,10.1145/3510003.3512765,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9793907,Software Bots;GitHub Bots;Human-bot Interaction;Open Source Software;Automation;Collaborative Development;Design Fiction,Bot (Internet);Prototypes;User interfaces;Encoding;Noise measurement;Task analysis;Open source software,,6.0,,69.0,CCBY,20 Jun 2022,,,IEEE,IEEE Conferences
72,Improving Feedback on GitHub Pull Requests: A Bots Approach,Z. Hu; E. F. Gehringer,"Department of Computer Science, North Carolina State University, Raleigh, USA; Department of Computer Science, North Carolina State University, Raleigh, USA",2019 IEEE Frontiers in Education Conference (FIE),12 Mar 2020,2019,,,1,9,"Rising enrollments make it difficult for instructors and teaching assistants to give adequate feedback on each student's work. Our course projects require students to submit GitHub pull requests as deliverables for their open-source software (OSS) projects. We have set up a static code analyzer and a continuous integration service on GitHub to help students check different aspects of the code. However, these tools have some limitations. In this paper, we discuss how we bypass the limitations of existing tools by implementing three Internet bots. These bots are either open source or free for OSS projects and can be easily integrated with any GitHub repositories. One-hundred one Computer Science and Computer Engineering masters students participated in our study. The survey results showed that more than 84% of students thought bots can help them to contribute code with better quality. We analyzed 396 pull requests. Results revealed that bots can provide more timely feedback than teaching staff. The Danger Bot is associated with a significant reduction system-specific guideline violations (by 39%), and the Code Climate Bot is associated with a significant 60% decrease of code smells in student contributions. However, we found that the Travis CI Bot did not help student contributions pass automated tests.",2377-634X,978-1-7281-1746-1,10.1109/FIE43999.2019.9028685,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9028685,Internet bots;open-source software;software engineering;open-source curriculum;automated feedback;Expertiza,Tools;Bot (Internet);Meteorology;Guidelines;Education;Programming,,6.0,,17.0,IEEE,12 Mar 2020,,,IEEE,IEEE Conferences
73,From Specialized Mechanics to Project Butlers: The Usage of Bots in Open Source Software Development,Z. Wang; Y. Wang; D. Redmiles,"University of California, Irvine; University of Posts and Telecommunications, Beijing; University of California, Irvine",IEEE Software,23 Aug 2022,2022,39.0,5.0,38,43,We seek to identify how open source software (OSS) projects adopt bot services from a diverse set of selections. Our empirical research examines bot usage in the most popular OSS repositories in GitHub.,1937-4194,,10.1109/MS.2022.3180297,National Natural Science Foundation of China(grant numbers:62172049); ,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9789275,,Software development management;Bot (Internet);Task analysis;Software;Codes;Automation;Protocols,,5.0,,11.0,CCBY,6 Jun 2022,,,IEEE,IEEE Magazines
74,Detecting and Characterizing Bots that Commit Code,T. Dey; S. Mousavi; E. Ponce; T. Fry; B. Vasilescu; A. Filippova; A. Mockus,"The University of Tennessee, Knoxville, TN, USA; The University of Tennessee, Knoxville, TN, USA; The University of Tennessee, Knoxville, TN, USA; The University of Tennessee, Knoxville, TN, USA; Carnegie Mellon University, Pittsburgh, PA, USA; Github, San Francisco, CA, USA; The University of Tennessee, Knoxville, TN, USA",2020 IEEE/ACM 17th International Conference on Mining Software Repositories (MSR),20 Jun 2023,2020,,,209,219,"Background: Some developer activity traditionally performed manually, such as making code commits, opening, managing, or closing issues is increasingly subject to automation in many OSS projects. Specifically, such activity is often performed by tools that react to events or run at specific times. We refer to such automation tools as bots and, in many software mining scenarios related to developer productivity or code quality, it is desirable to identify bots in order to separate their actions from actions of individuals. Aim: Find an automated way of identifying bots and code committed by these bots, and to characterize the types of bots based on their activity patterns. Method and Result: We propose BIMAN, a systematic approach to detect bots using author names, commit messages, files modified by the commit, and projects associated with the commits. For our test data, the value for AUC-ROC was 0.9. We also characterized these bots based on the time patterns of their code commits and the types of files modified, and found that they primarily work with documentation files and web pages, and these files are most prevalent in HTML and JavaScript ecosystems. We have compiled a shareable dataset containing detailed information about 461 bots we found (all of which have more than 1000 commits) and 13,762,430 commits they created.",2574-3864,978-1-4503-7517-7,10.1145/3379597.3387478,"NSF(grant numbers:CNS-1925615,IIS-1633437,IIS-1901102,1717415,1901311); ",https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10148716,bots;automated commits;random forest;ensemble model;social coding platforms;software engineering,Productivity;Codes;Automation;Systematics;Social networking (online);Web pages;Chatbots,,25.0,,49.0,,20 Jun 2023,,,IEEE,IEEE Conferences
75,Between JIRA and GitHub: ASFBot and its Influence on Human Comments in Issue Trackers,A. Moharil; D. Orlov; S. Jameel; T. Trouwen; N. Cassee; A. Serebrenik,"Eindhoven University of Technology, Eindhoven, The Netherlands; Eindhoven University of Technology, Eindhoven, The Netherlands; Eindhoven University of Technology, Eindhoven, The Netherlands; Eindhoven University of Technology, Eindhoven, The Netherlands; Eindhoven University of Technology, Eindhoven, The Netherlands; Eindhoven University of Technology, Eindhoven, The Netherlands",2022 IEEE/ACM 19th International Conference on Mining Software Repositories (MSR),21 Jun 2022,2022,,,112,116,"Open-Source Software (OSS) projects have adopted various automations for repetitive tasks in recent years. One common type of automation in OSS is bots. In this exploratory case study, we seek to understand how the adoption of one particular bot (ASFBot) by the Apache Software Foundation (ASF) impacts the discussions in the issue-trackers of these projects. We use the SmartShark dataset to investigate whether the ASFBot affects (i) human comments mentioning pull requests and fixes in issue comments and (ii) the general human comment rate on issues. We apply a regression discontinuity design (RDD) on nine ASF projects that have been active both before and after the ASFBot adoption. Our results indicate (i) an immediate decrease in the number of median comments mentioning pull requests and fixes after the bot adoption, but the trend of a monthly decrease in this comment count is reversed, and (ii) no effect in the number of human comments after the bot adoption. We make an effort to gather first insights in understanding the impact of adopting the ASFBot on the commenting behavior of developers who are working on ASF projects.",2574-3864,978-1-4503-9303-4,10.1145/3524842.3528528,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9796306,bots;ASFBot;issue-trackers;Apache,Bot (Internet);Automation;Market research;Behavioral sciences;Data mining;Task analysis;Open source software,,1.0,,30.0,CCBY,21 Jun 2022,,,IEEE,IEEE Conferences
76,Recommending Good First Issues in GitHub OSS Projects,W. Xiao; H. He; W. Xu; X. Tan; J. Dong; M. Zhou,"Key Laboratory of High Confidence Software Technologies, Ministry of Education, School of Computer Science, Peking University, Beijing, China; Key Laboratory of High Confidence Software Technologies, Ministry of Education, School of Computer Science, Peking University, Beijing, China; School of Computer Science and Technology, Soochow University, Suzhou, China; Key Laboratory of High Confidence Software Technologies, Ministry of Education, School of Computer Science, Peking University, Beijing, China; Key Laboratory of High Confidence Software Technologies, Ministry of Education, School of Computer Science, Peking University, Beijing, China; Key Laboratory of High Confidence Software Technologies, Ministry of Education, School of Computer Science, Peking University, Beijing, China",2022 IEEE/ACM 44th International Conference on Software Engineering (ICSE),20 Jun 2022,2022,,,1830,1842,"Attracting and retaining newcomers is vital for the sustainability of an open-source software project. However, it is difficult for new-comers to locate suitable development tasks, while existing “Good First Issues” (GFI) in GitHub are often insufficient and inappropriate. In this paper, we propose RECGFI, an effective practical approach for the recommendation of good first issues to newcomers, which can be used to relieve maintainers' burden and help newcomers onboard. RECGFI models an issue with features from multiple dimensions (content, background, and dynamics) and uses an XGBoost classifier to generate its probability of being a GFI. To evaluate RECGFI, we collect 53,510 resolved issues among 100 GitHub projects and care-fully restore their historical states to build ground truth datasets. Our evaluation shows that RECGFI can achieve up to 0.853 AUC in the ground truth dataset and outperforms alternative models. Our interpretable analysis of the trained model further reveals in-teresting observations about GFI characteristics. Finally, we report latest issues (without GFI-signaling labels but recommended as GFI by our approach) to project maintainers among which 16 are confirmed as real GFIs and five have been resolved by a newcomer.",1558-1225,978-1-4503-9221-1,10.1145/3510003.3510196,National Key R&D Program of China(grant numbers:2018YFB1004201); National Natural Science Foundation of China(grant numbers:61825201); ,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9793998,open-source software;onboarding;good first issues,Bot (Internet);Analytical models;Machine learning;Task analysis;Sustainable development;Open source software;Software development management,,8.0,,67.0,CCBY,20 Jun 2022,,,IEEE,IEEE Conferences
77,Understanding the Time to First Response in GitHub Pull Requests,K. A. Hasan; M. Macedo; Y. Tian; B. Adams; S. Ding,"School of Computing, Queen’s University, Kingston, ON, Canada; School of Computing, Queen’s University, Kingston, ON, Canada; School of Computing, Queen’s University, Kingston, ON, Canada; School of Computing, Queen’s University, Kingston, ON, Canada; School of Computing, Queen’s University, Kingston, ON, Canada",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),12 Jul 2023,2023,,,1,11,"The pull-based development is widely adopted in modern open-source software (OSS) projects, where developers propose changes to the codebase by submitting a pull request (PR). However, due to many reasons, PRs in OSS projects frequently experience delays across their lifespan, including prolonged waiting times for the first response. Such delays may significantly impact the efficiency and productivity of the development process, as well as the retention of new contributors as long-term contributors.In this paper, we conduct an exploratory study on the time-to-first-response for PRs by analyzing 111,094 closed PRs from ten popular OSS projects on GitHub. We find that bots frequently generate the first response in a PR, and significant differences exist in the timing of bot-generated versus human-generated first responses. We then perform an empirical study to examine the characteristics of bot- and human-generated first responses, including their relationship with the PR’s lifetime. Our results suggest that the presence of bots is an important factor contributing to the time-to-first-response in the pull-based development paradigm, and hence should be separately analyzed from human responses. We also report the characteristics of PRs that are more likely to experience long waiting for the first human-generated response. Our findings have practical implications for newcomers to understand the factors contributing to delays in their PRs.",2574-3864,979-8-3503-1184-6,10.1109/MSR59073.2023.00015,Natural Sciences and Engineering Research Council of Canada; ,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10173964,pull request;first response;latency analysis;fine-grained analysis;code review,Productivity;Focusing;Chatbots;Delays;Time factors;Data mining;Open source software,,,,32.0,IEEE,12 Jul 2023,,,IEEE,IEEE Conferences
78,"Exploring Activity and Contributors on GitHub: Who, What, When, and Where",X. Xia; Z. Weng; W. Wang; S. Zhao,"Data Science and Engineering, East China Normal University, Shanghai, China; Data Science and Engineering, East China Normal University, Shanghai, China; Data Science and Engineering, East China Normal University, Shanghai, China; School of Electronic and Information Engineering, Tongji University, Shanghai, China",2022 29th Asia-Pacific Software Engineering Conference (APSEC),16 Feb 2023,2022,,,11,20,"Apart from being a code hosting platform, GitHub is the place where large-scale open collaborations and contributions happen. Every minute, thousands of developers are submitting code, having discussions of issues or pull requests, with all user behaviors recorded in the GitHub Event Stream (GES). Exploration of the activities in the GES could help understand who is active, the way they work, the time when they are active and even their location. To this end, a large-scale analysis was initially performed based on the 0.86 billion event records generated in 2020. We extracted 902K active contributors out of 14 million GitHub accounts by observing their activity distribution, then explored their behavior distribution, active time in the day and week, and estimated time zone distributions on the basis of their circadian activity rhythm. To go deeper, a case study of 79 projects in CNCF and contrast analyses of different project maturity levels were conducted. Our results showed that from a macro perspective, bots are increasingly more active and can serve numerous projects. Contributors work on weekdays, and are globally more inclined toward the daytime working hours in the Americas and Europe. The time zone distribution also reveals that UTC+2 and UTC-4 have the most active contributors. A critical discovery was the validation and quantification of a high bus factor risk exists in the OSS ecosystem. Whether from a large group point of view or within specific projects, a rather small group of OSS contributors (less than 20%) undertook the majority of the work. The GES can provide a wealth of information about open source software (OSS). Our findings provide insights into global GitHub collaboration behaviors and may be of help for researchers and practitioners to further understand modern OSS ecosystem.",2640-0715,978-1-6654-5537-4,10.1109/APSEC57359.2022.00013,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10043221,GitHub behavior data;Contributor Activity;Open Source Collaboration,Codes;Ecosystems;Collaboration;Venture capital;Germanium;Chatbots;Rhythm,,2.0,,44.0,IEEE,16 Feb 2023,,,IEEE,IEEE Conferences
79,Android botnets on the rise: Trends and characteristics,H. Pieterse; M. S. Olivier,"Defence, Peace, Safety and Security, Council of Scientific and Industrial Research, Pretoria, South Africa; Department of Computer Science, University of Pretoria, Pretoria, South Africa",2012 Information Security for South Africa,4 Oct 2012,2012,,,1,5,"Smartphones are the latest technology trend of the 21st century. Today's social expectation of always staying connected and the need for an increase in productivity are the reasons for the increase in smartphone usage. One of the leaders of the smartphone evolution is Google's Android Operating System (OS). The openness of the design and the ease of customizing are the aspects that are placing Android ahead of the other smartphone OSs. Such popularity has not only led to an increase in Android usage but also to the rise of Android malware. Although such malware is not having a significant impact on the popularity of Android smartphones, it is however creating new possibilities for threats. One such threat is the impact of botnets on Android smartphones. Recently, malware has surfaced that revealed specific characteristics relating to traditional botnet activities. Malware such as Geinimi, Pjapps, DroidDream, and RootSmart all display traditional botnet functionalities. These malicious applications show that Android botnets is a reality. From a security perspective it is important to understand the underlying structure of an Android botnet. This paper evaluates Android malware with the purpose of identifying specific trends and characteristics relating to botnet behaviour. The botnet trends and characteristics are detected by a comprehensive literature study of well-known Android malware applications. The identified characteristics are then further explored in terms of the Android Botnet Development Model and the Android Botnet Discovery Process. The common identified trends and characteristics aid the understanding of Android botnet activities as well as the possible discovery of an Android bot.",2330-9881,978-1-4673-2159-4,10.1109/ISSA.2012.6320432,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6320432,Android;botnet;malware;application;trends;characteristics,Androids;Humanoid robots;Smart phones;Malware;Market research;Servers,,47.0,5.0,21.0,IEEE,4 Oct 2012,,,IEEE,IEEE Conferences
